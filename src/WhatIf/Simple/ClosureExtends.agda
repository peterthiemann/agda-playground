module Simple.ClosureExtends where

open import Data.Unit using (‚ä§; tt)
open import Data.String using (String; _‚âü_)
open import Data.List using (List; []; _‚à∑_; [_]; _++_; length; lookup; foldr)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_; _‚à∑‚Å∫_; head; tail)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; [] ; _‚à∑_; ++‚Å∫)
open import Data.Bool using (Bool; true; false)
open import Data.Fin using (Fin; zero; suc; from‚Ñï<; inject‚â§)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_)
open import Data.Nat.Properties using () renaming (‚â§-trans to ‚â§‚Ñï-trans)
open import Data.Maybe using (Maybe; nothing; just)
open import Data.Product using (_√ó_; _,_ ; -,_; proj‚ÇÅ ; proj‚ÇÇ; ‚àÉ-syntax; Œ£)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Relation.Nullary.Decidable using (Dec; yes; no)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; trans; cong)
open import Function using (case_of_)

open import Qualifiers
open import Simple.StackBasedBigStep

read-heap-closure : Heap ‚Üí Set
read-heap-closure ùìó = ‚àÄ ‚Ñì {v} ‚Üí read ùìó ‚Ñì v ‚Üí q-val v ‚â° ùüô

rhc-drop : read-heap-closure (v ‚à∑ ùìó) ‚Üí read-heap-closure ùìó
rhc-drop rhc ‚Ñì x = rhc (suc ‚Ñì) (read1 x)

rhc-ext : read-heap-closure ùìó ‚Üí q-val v ‚â° ùüô ‚Üí read-heap-closure (ùìó ++ [ v ])
rhc-ext {ùìó = []} rhc qv=ùüô ‚Ñì read0 = qv=ùüô
rhc-ext {ùìó = x‚ÇÅ ‚à∑ ùìó} rhc qv=ùüô ‚Ñì read0 = rhc ‚Ñì read0
rhc-ext {ùìó = x‚ÇÅ ‚à∑ ùìó} rhc qv=ùüô (suc ‚Ñì) (read1 x) = rhc-ext (rhc-drop rhc) qv=ùüô ‚Ñì x

rhc-write : read-heap-closure ùìó ‚Üí q-val v ‚â° ùüô ‚Üí write ùìó ‚Ñì v ùìó‚Ä≤ ‚Üí read-heap-closure ùìó‚Ä≤
rhc-write rhc qv=ùüô write0 ‚Ñìr read0 = qv=ùüô
rhc-write rhc qv=ùüô write0 ‚Ñìr (read1 rd) = rhc ‚Ñìr (read1 rd)
rhc-write rhc qv=ùüô (write1 wr) ‚Ñìr read0 = rhc ‚Ñìr read0
rhc-write rhc qv=ùüô (write1 wr) (suc ‚Ñìr) (read1 rd) = rhc-write (rhc-drop rhc) qv=ùüô wr ‚Ñìr rd

read-heap-env : Env ‚Üí Set
read-heap-env ùìî = ‚àÄ {s} {v} ‚Üí Access ùìî (X s ùüô) v ‚Üí q-val v ‚â° ùüô

rhe-ext : read-heap-env ùìî ‚Üí q-val v ‚â° ùüô ‚Üí read-heap-env ‚ü® s ‚âî v , ùìî ‚ü©
rhe-ext rhe qv=ùüô here = qv=ùüô
rhe-ext rhe qv=ùüô (there x _) = rhe x

clos-condition : Val ‚Üí Stack ‚Üí Set
clos-condition v ùì¢‚Ä≤ = case v of Œª{ (clos q‚ÇÅ ùìî‚Ä≤ ùì¢·∂ú x e‚Ä≤ q‚ÇÇ) ‚Üí ùì¢·∂ú ‚âº‚Çõ ùì¢‚Ä≤ ; _ ‚Üí ‚ä§ }

eval-heap-inv :
      read-heap-closure ùìó
    ‚Üí read-heap-env ùìî
    ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ e ‚áì[ q ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
    ‚Üí read-heap-closure ùìó‚Ä≤
    √ó q-val v ‚â§ q
    √ó clos-condition v ùì¢‚Ä≤

eval-heap-inv rhc rhe EUnit = rhc , ‚â§-bot , tt
eval-heap-inv rhc rhe (EVarH x) rewrite rhe x = rhc , ‚â§-refl , {!!}
eval-heap-inv rhc rhe (EVarS x x‚ÇÅ) = rhc , ‚â§-top , {!!}
eval-heap-inv {q = ùüô} rhc rhe (EAbs {ùì¢ = ùì¢} ‚â§-refl x‚ÇÅ refl) = rhc , ‚â§-refl , ‚âº‚Çõ-bot ùì¢
eval-heap-inv {q = ùüö} rhc rhe (EAbs {ùüô}{ùì¢ = ùì¢} x x‚ÇÅ refl) = rhc , x , ‚âº‚Çõ-bot ùì¢
eval-heap-inv {q = ùüö} rhc rhe (EAbs {ùüö}{ùì¢ = ùì¢} x x‚ÇÅ refl) = rhc , x , (‚âº‚Çõ-refl{ùì¢})

eval-heap-inv rhc rhe (EApp q‚â§ ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ x)
  with eval-heap-inv rhc rhe ‚áì
... | rhc‚ÇÅ , qv‚â§‚ÇÅ , casev‚ÇÅ
  with eval-heap-inv rhc‚ÇÅ rhe ‚áì‚ÇÅ
eval-heap-inv {q = ùüô} rhc rhe (EApp {q‚ÇÄ = ùüô} {q = ùüô}{q‚ÇÅ = ùüô} q‚â§ ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ x)
  | rhc‚ÇÅ , qv‚â§‚ÇÅ , casev‚ÇÅ
  | rhc‚ÇÇ , qv‚â§‚ÇÇ , casev‚ÇÇ
  -- here we need typing to obtain `read-heap-env ùìî‚Ä≤` from `clos ùüô ùìî‚Ä≤ ùì¢·∂ú (X s ùüô) e q‚ÇÇ`
    with eval-heap-inv rhc‚ÇÇ {!rhe-ext rhe (‚â§‚áí‚â° qv‚â§‚ÇÇ)!} ‚áì‚ÇÇ
... | r = {!!}
eval-heap-inv {q = ùüô} rhc rhe (EApp {q‚ÇÄ = ùüô} {q = ùüö}{q‚ÇÅ = ùüô} q‚â§ ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ x)
  | rhc‚ÇÅ , qv‚â§‚ÇÅ , casev‚ÇÅ
  | rhc‚ÇÇ , qv‚â§‚ÇÇ , casev‚ÇÇ = {!!}
eval-heap-inv {q = ùüô} rhc rhe (EApp {q‚ÇÄ = ùüô} {q = q‚Ä≤}{q‚ÇÅ = ùüö} q‚â§ ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ x)
  | rhc‚ÇÅ , qv‚â§‚ÇÅ , casev‚ÇÅ
  | rhc‚ÇÇ , qv‚â§‚ÇÇ , casev‚ÇÇ = {!!}
eval-heap-inv {q = ùüö} rhc rhe (EApp {q‚ÇÄ = ùüö} {q = q‚Ä≤}{q‚ÇÅ = ùüô} q‚â§ ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ x)
  | rhc‚ÇÅ , qv‚â§‚ÇÅ , casev‚ÇÅ
  | rhc‚ÇÇ , qv‚â§‚ÇÇ , casev‚ÇÇ = {!!}
eval-heap-inv {q = ùüö} rhc rhe (EApp {q‚ÇÄ = ùüö} {q = q‚Ä≤}{q‚ÇÅ = ùüö} q‚â§ ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ x)
  | rhc‚ÇÅ , qv‚â§‚ÇÅ , casev‚ÇÅ
  | rhc‚ÇÇ , qv‚â§‚ÇÇ , casev‚ÇÇ = {!!}

eval-heap-inv rhc rhe (ERef {q = ùüô} ‚â§-refl ‚áì (refl , refl , refl))
  with eval-heap-inv rhc rhe ‚áì
... | rhc‚Ä≤ , qv‚â§ , casev = rhc-ext rhc‚Ä≤ (‚â§‚áí‚â° qv‚â§) , ‚â§-refl , tt
eval-heap-inv rhc rhe (ERef {q = ùüö} q‚â§ ‚áì (refl , refl))
  with eval-heap-inv rhc rhe ‚áì
... | rhc‚Ä≤ , qv‚â§ , casev = rhc‚Ä≤ , q‚â§ , tt
eval-heap-inv {q = ùüô} rhc rhe (EDeref {‚Ñì = ‚Ñì} x ‚áì rd)
  with eval-heap-inv rhc rhe ‚áì
... | rhc‚Ä≤ , qv‚â§ , casev
  with rhc‚Ä≤ ‚Ñì
... | qv
  rewrite qv rd = rhc‚Ä≤ , ‚â§-refl , {!!}
eval-heap-inv {q = ùüö} rhc rhe (EDeref x ‚áì x‚ÇÅ)
  with eval-heap-inv rhc rhe ‚áì
... | rhc‚Ä≤ , qv‚â§ , casev = rhc‚Ä≤ , ‚â§-top , {!!}
eval-heap-inv rhc rhe (ESetref {q‚ÇÅ = ùüô} ‚áì ‚áì‚ÇÅ (wr , refl))
  with eval-heap-inv rhc rhe ‚áì
... | rhc‚ÇÅ , qv‚â§‚ÇÅ , casev‚ÇÅ
  with eval-heap-inv rhc‚ÇÅ rhe ‚áì‚ÇÅ
... | rhc‚ÇÇ , qv‚â§‚ÇÇ , casev‚ÇÇ = rhc-write rhc‚ÇÇ (‚â§‚áí‚â° qv‚â§‚ÇÇ) wr , ‚â§-bot , tt
eval-heap-inv rhc rhe (ESetref {q‚ÇÅ = ùüö} ‚áì ‚áì‚ÇÅ (refl , wr))
  with eval-heap-inv rhc rhe ‚áì
... | rhc‚ÇÅ , qv‚â§‚ÇÅ , casev‚ÇÅ
  with eval-heap-inv rhc‚ÇÅ rhe ‚áì‚ÇÅ
... | rhc‚ÇÇ , qv‚â§‚ÇÇ , casev‚ÇÇ  = rhc‚ÇÇ , ‚â§-bot , tt
eval-heap-inv rhc rhe (ESeq ‚áì ‚áì‚ÇÅ)
  with eval-heap-inv rhc rhe ‚áì
... | rhc‚Ä≤ , ih‚Ä≤ , casev‚Ä≤
  with eval-heap-inv rhc‚Ä≤ rhe ‚áì‚ÇÅ
... | rhc‚Ä≥ , ih‚Ä≥ , casev‚Ä≥ = rhc‚Ä≥ , ih‚Ä≥ , casev‚Ä≥


{-
eval-clos-‚âº‚Çõ :
    read-heap-closure ùìó
    ‚Üí ùìî , ùìó , ùì¢ ‚ä¢ e ‚áì[ q ] clos q‚ÇÅ ùìî‚Ä≤ ùì¢·∂ú x e‚Ä≤ q‚ÇÇ  ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
    ‚Üí ùì¢·∂ú ‚âº‚Çõ ùì¢‚Ä≤ √ó read-heap-closure ùìó‚Ä≤
-}
