{-# OPTIONS --allow-unsolved-metas #-}
module Simple.StackBasedBigStep where

open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Unit using (‚ä§; tt)
open import Data.String using (String; _‚âü_)
open import Data.List using (List; []; _‚à∑_; [_]; _++_; length; lookup; map; take)
open import Data.List.Properties using (length-++; ++-identity ≥; ++-assoc)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_; _‚à∑‚Å∫_; head; tail)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; []; _‚à∑_)
open import Data.Bool using (Bool; true; false) renaming (T to ùïã)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<·µá_; _<_; z‚â§n; s‚â§s) renaming (_‚â§_ to _‚â§‚Ñï_)
open import Data.Nat.Properties using (<·µá‚áí<; +-suc; +-identity ≥; n‚â§1+n; m‚â§m+n) renaming (‚â§-refl to ‚â§‚Ñï-refl; ‚â§-trans to ‚â§‚Ñï-trans)
open import Data.Fin using (Fin; zero; suc; from‚Ñï; from‚Ñï<; inject‚â§)
open import Data.Maybe using (Maybe; nothing; just)
open import Data.Product using (_√ó_; _,_ ; proj‚ÇÅ ; proj‚ÇÇ; Œ£; ‚àÉ-syntax)
open import Function using (case_of_; const; _‚àò_)
open import Relation.Nullary using (¬¨_)
open import Relation.Nullary.Decidable using (Dec; yes; no)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; _‚â¢_; refl; sym; trans; subst; cong; cong‚ÇÇ; dcong)

{-
** The problem

If we pass stack arguments to a heap closure, then we need to ensure that the
callers' stack does not get corrupted. Corruption can only happen in the presence of
references.

As an example, suppose we pass a stack reference r which contains another stack reference.
That is r : ref 2 (ref 2 Int). On the local stack, we allocate a new reference as in
x = ref 2 (42)
and overwrite the content of r with it
r := x
Now the callers' stack contains a reference to the current stackframe, which becomes
invalid after return from the heap closure (as this return pops the stack).

** Design alternatives

1. Disallow passing stack references to heap closures.
   A well-formedness constraint on function types can help: if the function is heap, then its arguments and results must be heap, too.

2. If we pass a stack reference to a heap function, then it should not be written to.
   To this end, we might introduce a type of read-only references as a supertype of read-write references such that ref 2 T <: roref 2 T' where T' is a read-only supertype of T.
   Writing to a stack reference could happen indirectly via a stack closure, so we'd have to have a simple effect that all writeable references are on the heap.

   (on the other hand, references to primitive type are ok as we cannot introduce backpointers through this avenue.)

** Here we choose option 1.

-}

-- some Fin lemmas

inject‚â§-refl : ‚àÄ {n} (i : Fin n) ‚Üí inject‚â§ i ‚â§‚Ñï-refl ‚â° i
inject‚â§-refl zero = refl
inject‚â§-refl (suc i) = cong suc (inject‚â§-refl i)

inject‚â§-trans : ‚àÄ {n}{m}{o} (i : Fin n) {n‚â§m : n ‚â§‚Ñï m} {m‚â§o : m ‚â§‚Ñï o} ‚Üí inject‚â§ (inject‚â§ i n‚â§m) m‚â§o ‚â° inject‚â§ i (‚â§‚Ñï-trans n‚â§m m‚â§o)
inject‚â§-trans {n = suc n}{m = suc m}{o = suc o} zero = refl
inject‚â§-trans {n = suc n} {m = suc m} {o = suc o} (suc i) {s‚â§s n‚â§m} {s‚â§s m‚â§o} = cong suc (inject‚â§-trans i {n‚â§m} {m‚â§o})

from‚Ñï-inject‚â§ : ‚àÄ {m}{n}{i} ‚Üí (n‚â§m : n ‚â§‚Ñï m) ‚Üí (i< : i < n) ‚Üí from‚Ñï< (‚â§‚Ñï-trans i< n‚â§m) ‚â° inject‚â§ (from‚Ñï< i<) n‚â§m
from‚Ñï-inject‚â§ {m} {suc n} {zero} (s‚â§s n‚â§m) (s‚â§s i<) = refl
from‚Ñï-inject‚â§ {m} {suc n} {suc i} (s‚â§s n‚â§m) (s‚â§s i<) = cong suc (from‚Ñï-inject‚â§ n‚â§m i<)

-- Nat lemmas

‚â°‚áí‚â§ : ‚àÄ {x y : ‚Ñï} ‚Üí x ‚â° y ‚Üí x ‚â§‚Ñï y
‚â°‚áí‚â§ refl = ‚â§‚Ñï-refl

-- List lemmas

length-‚â§ : ‚àÄ {a}{A : Set a} (xs ys : List A) ‚Üí length xs ‚â§‚Ñï length (xs ++ ys)
length-‚â§ [] ys = z‚â§n
length-‚â§ (x ‚à∑ xs) ys = s‚â§s (length-‚â§ xs ys)

lookup-++ : ‚àÄ {a} {A : Set a} ‚Üí (xs ys : List A) ‚Üí (i : Fin (length xs))
  ‚Üí lookup xs i ‚â° lookup (xs ++ ys) (inject‚â§ i (‚â§‚Ñï-trans (m‚â§m+n (length xs) (length ys)) (‚â°‚áí‚â§ (sym (length-++ xs)))))
lookup-++ (x ‚à∑ xs) ys zero = refl
lookup-++ (x ‚à∑ xs) ys (suc i) = lookup-++ xs ys i

length-< : ‚àÄ {a} {A : Set a} ‚Üí (y : A) (xs ys : List A) ‚Üí length xs < length (xs ++ (y ‚à∑ ys))
length-< y [] ys = s‚â§s z‚â§n
length-< y (x ‚à∑ xs) ys = s‚â§s (length-< y xs ys)

lookup-last : ‚àÄ {a} {A : Set a} ‚Üí (y : A) (xs : List A) ‚Üí lookup (xs ++ [ y ]) (from‚Ñï< (length-< y xs [])) ‚â° y
lookup-last y [] = refl
lookup-last y (x ‚à∑ xs) = lookup-last y xs

lookup-from-i : ‚àÄ {a}{A : Set a} (xs : List A) {ys : List A} {i}
  ‚Üí (i< : i < length xs)
  ‚Üí lookup (xs ++ ys) (from‚Ñï< (‚â§‚Ñï-trans i< (length-‚â§ xs ys))) ‚â° lookup xs (from‚Ñï< i<)
lookup-from-i (x ‚à∑ xs) {i = zero} i< = refl
lookup-from-i (x ‚à∑ xs) {i = suc i} (s‚â§s i<) = lookup-from-i xs i<

lookup-from-i‚Ä≤ : ‚àÄ {a}{A : Set a} (xs : List A) {ys zs : List A} {i}
  ‚Üí (i< : i < length xs)
  ‚Üí (eq : xs ++ ys ‚â° zs)
  ‚Üí lookup zs (from‚Ñï< (‚â§‚Ñï-trans i< (subst (Œª zs ‚Üí length xs ‚â§‚Ñï length zs) eq (length-‚â§ xs ys)))) ‚â° lookup xs (from‚Ñï< i<)
lookup-from-i‚Ä≤ xs i< refl = lookup-from-i xs i<


--

Ident = String
StackMap = Ident ‚Üí Maybe ‚Ñï

open import Qualifiers


-- well-formed types

data Type (q : Qual) : Set
record QType : Set where
  inductive
  constructor mkQ
  field
    q-of : Qual
    t-of : Type q-of
open QType public

data Type q where
  Unit : Type q
  Base : Type q
  Fun  : (S‚ÇÅ : QType) ‚Üí (S‚ÇÇ : QType) ‚Üí q-of S‚ÇÅ ‚â§ q ‚Üí q-of S‚ÇÇ ‚â§ q ‚Üí Type q
  Ref  : (S : QType) ‚Üí q-of S ‚â§ q ‚Üí Type q

syntax mkQ q t = t ^ q

-- variables

record Var : Set where
  inductive
  constructor X
  field
    ident : Ident
    q-var : Qual
open Var public

-- values
data Val : Set
data Local : Set where
  ‚àÖ : Local
  ‚ü®_‚âî_,_‚ü© : Ident ‚Üí Val ‚Üí Local ‚Üí Local
Env = Local
Heap = List Val

data Expr : Set where
  cst    : ‚Ñï ‚Üí Expr
  unit   : Expr
  var    : Var ‚Üí Expr
  lam    : Qual ‚Üí Var ‚Üí Expr ‚Üí Qual ‚Üí Expr
  app    : Expr ‚Üí Expr ‚Üí Expr
  seq    : Expr ‚Üí Expr ‚Üí Expr
  ref    : Qual ‚Üí Expr ‚Üí Expr
  deref  : Qual ‚Üí Expr ‚Üí Expr
  setref : Expr ‚Üí Expr ‚Üí Expr

data Val where
  unit : Val
  cst  : ‚Ñï ‚Üí Val
  clos : Qual ‚Üí Env ‚Üí Maybe StackMap ‚Üí Var ‚Üí Expr ‚Üí Qual ‚Üí Val
  ref  : Qual ‚Üí ‚Ñï ‚Üí Val

‚Üëexpr : Val ‚Üí Expr
‚Üëexpr unit = unit
‚Üëexpr (clos q ùìî œÉ? x e q‚ÇÇ) = lam q x e q‚ÇÇ
‚Üëexpr (cst x) = cst x
‚Üëexpr (ref q n) = ref q (cst n)


Stack : Set
Stack = List‚Å∫ (List Val)


variable
  ùìî ùìî‚Ä≤ : Env
  ùìó ùìó‚Ä≤ ùìó‚Ä≥ ùìó‚Ä¥ : Heap
  ùì¢ ùì¢‚Ä≤ ùì¢‚Ä≥ ùì¢‚Ä¥ ùì¢‚Åó ùì¢‚ÇÅ ùì¢‚ÇÇ ùì¢‚ÇÉ : Stack
  ùìõ : List (List Val)
  œÉ œÉ‚Ä≤ œÉ‚Ä≥ : StackMap
  œÉ? : Maybe StackMap
  ùì¢œÉ : Stack √ó StackMap
  s s‚Ä≤ : Ident
  v v‚Ä≤ v‚Ä≥ v‚ÇÅ v‚ÇÇ : Val
  vs vs‚Ä≤ : List Val
  x x‚Ä≤ : Var
  e e‚ÇÅ e‚ÇÇ : Expr
  Œ¶ Œ¶‚Ä≤ Œ¶‚Ä≥ : Local
  n ‚Ñì : ‚Ñï


-- typing

data Context : Set where

  ‚àÖ : Context
  _,_‚¶Ç_[_] : (Œì : Context) ‚Üí (x : Var) ‚Üí (S : QType)¬†‚Üí (q-of S ‚â° q-var x) ‚Üí Context

variable
  Œì Œì‚Ä≤ Œì‚Ä≥ Œì‚Ä¥ : Context
  T T‚ÇÅ T‚ÇÇ : Type q
  S S‚Ä≤ S‚ÇÅ S‚ÇÇ S‚ÇÉ S‚ÇÑ : QType

data _‚àã_‚¶Ç_ : Context ‚Üí Var ‚Üí QType ‚Üí Set where

  here   : ‚àÄ {S‚â§x} ‚Üí (Œì , x ‚¶Ç S [ S‚â§x ]) ‚àã x ‚¶Ç S
  there  : ‚àÄ {S‚â§x} ‚Üí Œì ‚àã x ‚¶Ç S ‚Üí x ‚â¢ x‚Ä≤ ‚Üí (Œì , x‚Ä≤ ‚¶Ç S‚Ä≤ [ S‚â§x ]) ‚àã x ‚¶Ç S

q-var-type : Œì ‚àã x ‚¶Ç S ‚Üí q-of S ‚â§ q-var x
q-var-type (here {S‚â§x = refl}) = ‚â§-refl -- S‚â§x
q-var-type (there x‚àà x‚â¢x‚Ä≤) = q-var-type x‚àà


-- lower bounds for qualifiers

q-val : Val ‚Üí Qual
q-val unit = ùüô
q-val (clos q _ _ _ _ _) = q
q-val (cst x) = ùüô
q-val (ref q _) = q

q-env : Env ‚Üí Qual
q-env ‚àÖ = ùüô
q-env ‚ü® s ‚âî v , ùìî ‚ü© = q-val v ‚äî q-env ùìî

-- q-bound : Context ‚Üí Qual
-- q-bound ‚àÖ = ùüô
-- q-bound (Œì , _ ‚¶Ç (_ ^ q) [ _ ]) = (q-bound Œì) ‚äî q

-- q-bounded : Qual ‚Üí Context ‚Üí Context
-- q-bounded q ‚àÖ = ‚àÖ
-- q-bounded q (Œì , s ‚¶Ç S [ S‚â§x ])
--   with q-of S ‚â§·µá q
-- ... | false = q-bounded q Œì
-- ... | true = q-bounded q Œì , s ‚¶Ç S [ S‚â§x ]

-- ùüö-bounded : (Œì : Context) ‚Üí Œì ‚â° q-bounded ùüö Œì
-- ùüö-bounded ‚àÖ = refl
-- ùüö-bounded (Œì , s ‚¶Ç S [ S‚â§x ])
--   rewrite ‚â§·µá-top {q-of S}
--   = cong (_, s ‚¶Ç S [ S‚â§x ]) (ùüö-bounded Œì)

module _ (q : Qual) where

  data q-Bound : Context ‚Üí Set where

    qb-‚àÖ : q-Bound ‚àÖ

    qb-add : ‚àÄ {S‚â§x} ‚Üí q-of S ‚â§ q ‚Üí q-Bound Œì ‚Üí q-Bound (Œì , x ‚¶Ç S [ S‚â§x ])

  data q-Bounded : Context ‚Üí Context ‚Üí Set where

    qb-‚àÖ : q-Bounded ‚àÖ ‚àÖ

    qb-keep : ‚àÄ {S‚â§x} ‚Üí q-of S ‚â§ q ‚Üí q-Bounded Œì Œì‚Ä≤ ‚Üí q-Bounded (Œì , x ‚¶Ç S [ S‚â§x ]) (Œì‚Ä≤ , x ‚¶Ç S [ S‚â§x ])

    qb-drop : ‚àÄ {S‚â§x} ‚Üí q-Bounded Œì Œì‚Ä≤ ‚Üí (‚àÄ {x‚Ä≤} {S‚Ä≤} ‚Üí Œì‚Ä≤ ‚àã x‚Ä≤ ‚¶Ç S‚Ä≤ ‚Üí x‚Ä≤ ‚â¢ x)  ‚Üí q-Bounded (Œì , x ‚¶Ç S [ S‚â§x ]) (Œì‚Ä≤)

is-bounded : q-Bounded q Œì Œì‚Ä≤ ‚Üí q-Bound q Œì‚Ä≤
is-bounded qb-‚àÖ = qb-‚àÖ
is-bounded (qb-keep x qbdd) = qb-add x (is-bounded qbdd)
is-bounded (qb-drop qbdd _) = is-bounded qbdd

data _<‚¶Ç‚Ä≤_ {q‚ÇÅ q‚ÇÇ : Qual} {qsub : q‚ÇÅ ‚â§ q‚ÇÇ} : Type q‚ÇÅ ‚Üí Type q‚ÇÇ ‚Üí Set

data _<‚¶Ç_ : QType ‚Üí QType ‚Üí Set where

  SQual : (qsub : q‚ÇÅ ‚â§ q‚ÇÇ)
    ‚Üí _<‚¶Ç‚Ä≤_ {qsub = qsub} T‚ÇÅ  T‚ÇÇ
    ‚Üí (T‚ÇÅ ^ q‚ÇÅ) <‚¶Ç (T‚ÇÇ ^ q‚ÇÇ)

data _<‚¶Ç‚Ä≤_ {q‚ÇÅ q‚ÇÇ qsub} where

  SUnit : Unit <‚¶Ç‚Ä≤ Unit

  SBase : Base <‚¶Ç‚Ä≤ Base

  SFun : ‚àÄ {wf‚ÇÅ wf‚ÇÇ wf‚ÇÉ wf‚ÇÑ}
    ‚Üí S‚ÇÉ <‚¶Ç S‚ÇÅ
    ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÑ
    ‚Üí Fun S‚ÇÅ S‚ÇÇ wf‚ÇÅ wf‚ÇÇ <‚¶Ç‚Ä≤ Fun S‚ÇÉ S‚ÇÑ wf‚ÇÉ wf‚ÇÑ

  SRef : ‚àÄ {wf‚ÇÅ wf‚ÇÇ}
    ‚Üí S‚ÇÅ <‚¶Ç S‚ÇÇ
    ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÅ
    ‚Üí Ref S‚ÇÅ wf‚ÇÅ <‚¶Ç‚Ä≤ Ref S‚ÇÇ wf‚ÇÇ

q-of-mono : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí q-of S‚ÇÅ ‚â§ q-of S‚ÇÇ
q-of-mono (SQual q1‚â§q2 _) = q1‚â§q2


<‚¶Ç-refl : S <‚¶Ç S
<‚¶Ç‚Ä≤-refl : ‚àÄ {T : Type q} ‚Üí _<‚¶Ç‚Ä≤_ {qsub = ‚â§-refl} T  T

<‚¶Ç-refl {mkQ q T} = SQual ‚â§-refl <‚¶Ç‚Ä≤-refl

<‚¶Ç‚Ä≤-refl {T = Unit} = SUnit
<‚¶Ç‚Ä≤-refl {T = Base} = SBase
<‚¶Ç‚Ä≤-refl {T = Fun S‚ÇÅ S‚ÇÇ wf‚ÇÅ wf‚ÇÇ} = SFun <‚¶Ç-refl <‚¶Ç-refl
<‚¶Ç‚Ä≤-refl {T = Ref S x} = SRef <‚¶Ç-refl <‚¶Ç-refl

<‚¶Ç-trans : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÉ ‚Üí S‚ÇÅ <‚¶Ç S‚ÇÉ
<‚¶Ç‚Ä≤-trans : ‚àÄ {T‚ÇÅ : Type q‚ÇÅ}{T‚ÇÇ : Type q‚ÇÇ}{T‚ÇÉ : Type q‚ÇÉ}{qsub‚ÇÅ : q‚ÇÅ ‚â§ q‚ÇÇ}{qsub‚ÇÇ : q‚ÇÇ ‚â§ q‚ÇÉ}
  ‚Üí _<‚¶Ç‚Ä≤_ {qsub = qsub‚ÇÅ} T‚ÇÅ T‚ÇÇ ‚Üí _<‚¶Ç‚Ä≤_ {qsub = qsub‚ÇÇ} T‚ÇÇ T‚ÇÉ ‚Üí _<‚¶Ç‚Ä≤_ {qsub = ‚â§-trans qsub‚ÇÅ qsub‚ÇÇ} T‚ÇÅ T‚ÇÉ

<‚¶Ç-trans (SQual qsub T‚ÇÅ<‚¶ÇT‚ÇÇ) (SQual qsub‚ÇÅ T‚ÇÇ<‚¶ÇT‚ÇÉ) = SQual (‚â§-trans qsub qsub‚ÇÅ) (<‚¶Ç‚Ä≤-trans T‚ÇÅ<‚¶ÇT‚ÇÇ T‚ÇÇ<‚¶ÇT‚ÇÉ)

<‚¶Ç‚Ä≤-trans (SUnit) (SUnit) = SUnit
<‚¶Ç‚Ä≤-trans (SBase) (SBase) = SBase
<‚¶Ç‚Ä≤-trans (SFun <‚¶Ç-arg‚ÇÅ <‚¶Ç-res‚ÇÅ) (SFun <‚¶Ç-arg‚ÇÇ <‚¶Ç-res‚ÇÇ) = SFun (<‚¶Ç-trans <‚¶Ç-arg‚ÇÇ <‚¶Ç-arg‚ÇÅ) (<‚¶Ç-trans <‚¶Ç-res‚ÇÅ <‚¶Ç-res‚ÇÇ)
<‚¶Ç‚Ä≤-trans (SRef S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ) (SRef S‚ÇÇ<‚¶ÇS‚ÇÉ S‚ÇÉ<‚¶ÇS‚ÇÇ) = SRef (<‚¶Ç-trans S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÉ) (<‚¶Ç-trans S‚ÇÉ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ)

<‚¶Ç-antisym : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÅ ‚Üí S‚ÇÅ ‚â° S‚ÇÇ
<‚¶Ç‚Ä≤-antisym : ‚àÄ {T‚ÇÅ T‚ÇÇ : Type q} ‚Üí _<‚¶Ç‚Ä≤_ {qsub = ‚â§-refl} T‚ÇÅ T‚ÇÇ ‚Üí _<‚¶Ç‚Ä≤_ {qsub = ‚â§-refl} T‚ÇÇ T‚ÇÅ ‚Üí T‚ÇÅ ‚â° T‚ÇÇ

<‚¶Ç-antisym (SQual qsub T‚ÇÅ<‚¶ÇT‚ÇÇ) (SQual qsub‚ÇÅ T‚ÇÇ<‚¶ÇT‚ÇÅ)
  with ‚â§-antisym qsub qsub‚ÇÅ
<‚¶Ç-antisym (SQual ‚â§-refl T‚ÇÅ<‚¶ÇT‚ÇÇ) (SQual ‚â§-refl T‚ÇÇ<‚¶ÇT‚ÇÅ) | refl
  = cong (mkQ _) (<‚¶Ç‚Ä≤-antisym T‚ÇÅ<‚¶ÇT‚ÇÇ T‚ÇÇ<‚¶ÇT‚ÇÅ)

<‚¶Ç‚Ä≤-antisym (SUnit) (SUnit) = refl
<‚¶Ç‚Ä≤-antisym (SBase) (SBase) = refl
<‚¶Ç‚Ä≤-antisym (SFun S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÅ<‚¶ÇS‚ÇÉ) (SFun S‚ÇÇ<‚¶ÇS‚ÇÅ S‚ÇÇ<‚¶ÇS‚ÇÇ)
  with refl ‚Üê <‚¶Ç-antisym S‚ÇÇ<‚¶ÇS‚ÇÅ S‚ÇÅ<‚¶ÇS‚ÇÇ
  with refl ‚Üê <‚¶Ç-antisym S‚ÇÅ<‚¶ÇS‚ÇÉ S‚ÇÇ<‚¶ÇS‚ÇÇ
  = cong‚ÇÇ (Fun _ _) ‚â§-irrelevant ‚â§-irrelevant
<‚¶Ç‚Ä≤-antisym (SRef S‚ÇÅ<‚¶ÇS‚ÇÇ _) (SRef  S‚ÇÇ<‚¶ÇS‚ÇÅ _)
  with refl ‚Üê <‚¶Ç-antisym S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ
  = cong (Ref _) ‚â§-irrelevant


-- data _<‚¶Ç_ : QType ‚Üí QType ‚Üí Set where

--   SUnit : q‚ÇÅ ‚â§ q‚ÇÇ
--     ‚Üí (Unit ^ q‚ÇÅ) <‚¶Ç (Unit ^ q‚ÇÇ)

--   SBase : q‚ÇÅ ‚â§ q‚ÇÇ
--     ‚Üí (Base ^ q‚ÇÅ) <‚¶Ç (Base ^ q‚ÇÇ)

--   SFun : ‚àÄ {wf‚ÇÇ wf‚ÇÑ}
--     ‚Üí q‚ÇÅ ‚â§ q‚ÇÇ
--     ‚Üí S‚ÇÉ <‚¶Ç S‚ÇÅ
--     ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÑ
--     ‚Üí (Fun S‚ÇÅ S‚ÇÇ wf‚ÇÇ ^ q‚ÇÅ) <‚¶Ç (Fun S‚ÇÉ S‚ÇÑ wf‚ÇÑ ^ q‚ÇÇ)

--   SRef :
--     q‚ÇÅ ‚â§ q‚ÇÇ
--     ‚Üí S‚ÇÅ <‚¶Ç S‚ÇÇ
--     ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÅ
--     ‚Üí {wf‚ÇÅ : q-of S‚ÇÅ ‚â§ q‚ÇÅ}
--     ‚Üí {wf‚ÇÇ : q-of S‚ÇÇ ‚â§ q‚ÇÇ}
--     ‚Üí (Ref S‚ÇÅ wf‚ÇÅ ^ q‚ÇÅ) <‚¶Ç (Ref S‚ÇÇ wf‚ÇÇ ^ q‚ÇÇ)


-- q-of-mono : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí q-of S‚ÇÅ ‚â§ q-of S‚ÇÇ
-- q-of-mono (SUnit q1‚â§q2) = q1‚â§q2
-- q-of-mono (SBase q1‚â§q2) = q1‚â§q2
-- q-of-mono (SFun q1‚â§q2 S1<S2 S1<S3) = q1‚â§q2
-- q-of-mono (SRef q1‚â§q2 S1<S2 S2<S1) = q1‚â§q2

-- <‚¶Ç-refl : S <‚¶Ç S
-- <‚¶Ç-refl {Unit ^ q} = SUnit ‚â§-refl
-- <‚¶Ç-refl {Base ^ q} = SBase ‚â§-refl
-- <‚¶Ç-refl {Fun S‚ÇÅ S‚ÇÇ wf‚ÇÇ ^ q} = SFun ‚â§-refl <‚¶Ç-refl <‚¶Ç-refl
-- <‚¶Ç-refl {Ref S x ^ q} = SRef ‚â§-refl <‚¶Ç-refl <‚¶Ç-refl

-- <‚¶Ç-trans : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÉ ‚Üí S‚ÇÅ <‚¶Ç S‚ÇÉ
-- <‚¶Ç-trans (SUnit x) (SUnit x‚ÇÅ) = SUnit (‚â§-trans x x‚ÇÅ)
-- <‚¶Ç-trans (SBase x) (SBase x‚ÇÅ) = SBase (‚â§-trans x x‚ÇÅ)
-- <‚¶Ç-trans (SFun x <‚¶Ç-arg‚ÇÅ <‚¶Ç-res‚ÇÅ) (SFun x‚ÇÅ <‚¶Ç-arg‚ÇÇ <‚¶Ç-res‚ÇÇ) = SFun (‚â§-trans x x‚ÇÅ) (<‚¶Ç-trans <‚¶Ç-arg‚ÇÇ <‚¶Ç-arg‚ÇÅ) (<‚¶Ç-trans <‚¶Ç-res‚ÇÅ <‚¶Ç-res‚ÇÇ)
-- <‚¶Ç-trans (SRef x S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ) (SRef x‚ÇÅ S‚ÇÇ<‚¶ÇS‚ÇÉ S‚ÇÉ<‚¶ÇS‚ÇÇ) = SRef (‚â§-trans x x‚ÇÅ) (<‚¶Ç-trans S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÉ) (<‚¶Ç-trans S‚ÇÉ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ)


-- <‚¶Ç-antisym : S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí S‚ÇÇ <‚¶Ç S‚ÇÅ ‚Üí S‚ÇÅ ‚â° S‚ÇÇ
-- <‚¶Ç-antisym (SUnit x) (SUnit x‚ÇÅ) = cong (Œª q ‚Üí _ ^ q) (‚â§-antisym x x‚ÇÅ)
-- <‚¶Ç-antisym (SBase x) (SBase x‚ÇÅ) = cong (Œª q ‚Üí _ ^ q) (‚â§-antisym x x‚ÇÅ)
-- <‚¶Ç-antisym (SFun q‚ÇÅ<q‚ÇÇ S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÅ<‚¶ÇS‚ÇÉ) (SFun q‚ÇÇ<q‚ÇÅ S‚ÇÇ<‚¶ÇS‚ÇÅ S‚ÇÇ<‚¶ÇS‚ÇÇ)
--   with refl ‚Üê ‚â§-antisym q‚ÇÅ<q‚ÇÇ q‚ÇÇ<q‚ÇÅ
--   with refl ‚Üê <‚¶Ç-antisym S‚ÇÇ<‚¶ÇS‚ÇÅ S‚ÇÅ<‚¶ÇS‚ÇÇ
--   with refl ‚Üê <‚¶Ç-antisym S‚ÇÅ<‚¶ÇS‚ÇÉ S‚ÇÇ<‚¶ÇS‚ÇÇ
--   = cong (mkQ _) (cong (Fun _ _) ‚â§-irrelevant)
-- <‚¶Ç-antisym (SRef q‚ÇÅ<q‚ÇÇ S‚ÇÅ<‚¶ÇS‚ÇÇ _) (SRef q‚ÇÇ<q‚ÇÅ  S‚ÇÇ<‚¶ÇS‚ÇÅ _)
--   with refl ‚Üê ‚â§-antisym q‚ÇÅ<q‚ÇÇ q‚ÇÇ<q‚ÇÅ
--   with refl ‚Üê <‚¶Ç-antisym S‚ÇÅ<‚¶ÇS‚ÇÇ S‚ÇÇ<‚¶ÇS‚ÇÅ
--   = cong (Œª T ‚Üí T ^ _) (cong (Ref _) ‚â§-irrelevant)

-- subsume-type : Type ùüô ‚Üí Type ùüö
-- subsume-type Unit = Unit
-- subsume-type Base = Base
-- subsume-type (Fun S‚ÇÅ S‚ÇÇ wf‚ÇÅ wf‚ÇÇ) = Fun S‚ÇÅ S‚ÇÇ ‚â§-top ‚â§-top
-- subsume-type (Ref S wf) = Ref S ‚â§-top

-- subsume : (S : QType) ‚Üí q-of S ‚â° ùüô ‚Üí QType
-- subsume (mkQ q T) refl = subsume-type T ^ ùüö

-- <‚¶Ç-subsume : (S : QType) ‚Üí (q=ùüô : q-of S ‚â° ùüô) ‚Üí S <‚¶Ç subsume S q=ùüô
-- <‚¶Ç-subsume (mkQ q Unit) refl = SUnit ‚â§-bottop
-- <‚¶Ç-subsume (mkQ q Base) refl = SBase ‚â§-bottop
-- <‚¶Ç-subsume (mkQ q (Fun S‚ÇÅ S‚ÇÇ ‚â§-refl)) refl = SFun ‚â§-bottop <‚¶Ç-refl <‚¶Ç-refl
-- <‚¶Ç-subsume (mkQ q (Ref S ‚â§-refl)) refl = SRef ‚â§-bottop <‚¶Ç-refl <‚¶Ç-refl

-- context subtyping

data _<<‚¶Ç_ : Context ‚Üí Context ‚Üí Set where
  ‚àÖ  : ‚àÖ <<‚¶Ç ‚àÖ
  _,‚¶Ç_ : ‚àÄ {S‚â§x S‚Ä≤‚â§x} ‚Üí Œì‚Ä≤ <<‚¶Ç Œì ‚Üí S‚Ä≤ <‚¶Ç S ‚Üí (Œì‚Ä≤ , x ‚¶Ç S‚Ä≤ [ S‚Ä≤‚â§x ]) <<‚¶Ç (Œì , x ‚¶Ç S [ S‚â§x ])

<<‚¶Ç-refl : Œì <<‚¶Ç Œì
<<‚¶Ç-refl {‚àÖ} = ‚àÖ
<<‚¶Ç-refl {Œì , s ‚¶Ç S [ _ ]} = <<‚¶Ç-refl ,‚¶Ç <‚¶Ç-refl

-- typing

data _‚ä¢_‚¶Ç_ : Context ‚Üí Expr ‚Üí QType ‚Üí Set where

  TUnit : Œì ‚ä¢ unit ‚¶Ç (Unit ^ q)

  TVar : Œì ‚àã x ‚¶Ç S
    ‚Üí    Œì ‚ä¢ var x ‚¶Ç S

  TAbs : ‚àÄ {S‚â§x}
    ‚Üí (Œì‚Ä≤ , x ‚¶Ç S‚ÇÅ [ S‚â§x ]) ‚ä¢ e ‚¶Ç S‚ÇÇ
    ‚Üí q-Bounded q Œì Œì‚Ä≤
    ‚Üí let q‚ÇÅ = q-of S‚ÇÅ; q‚ÇÇ = q-of S‚ÇÇ
    in {wf‚ÇÅ : q‚ÇÅ ‚â§ q}
    ‚Üí {wf‚ÇÇ : q‚ÇÇ ‚â§ q}
    ‚Üí Œì ‚ä¢ lam q x e q‚ÇÇ ‚¶Ç ((Fun S‚ÇÅ S‚ÇÇ wf‚ÇÅ wf‚ÇÇ) ^ q)

  TApp : ‚àÄ {wf‚ÇÅ wf‚ÇÇ}
    ‚Üí Œì ‚ä¢ e‚ÇÅ ‚¶Ç (Fun S‚ÇÅ S‚ÇÇ wf‚ÇÅ wf‚ÇÇ ^ ùüö)
    ‚Üí Œì ‚ä¢ e‚ÇÇ ‚¶Ç S‚ÇÅ
    ‚Üí Œì ‚ä¢ app e‚ÇÅ e‚ÇÇ ‚¶Ç S‚ÇÇ

  TSub : Œì ‚ä¢ e ‚¶Ç S
    ‚Üí S <‚¶Ç S‚Ä≤
    ‚Üí Œì ‚ä¢ e ‚¶Ç S‚Ä≤

  TSeq :
    Œì ‚ä¢ e‚ÇÅ ‚¶Ç (Unit ^ ùüö)
    ‚Üí Œì ‚ä¢ e‚ÇÇ ‚¶Ç S
    ‚Üí Œì ‚ä¢ seq e‚ÇÅ e‚ÇÇ ‚¶Ç S

  TRef : {wf : q-of S ‚â§ q}
    ‚Üí Œì ‚ä¢ e ‚¶Ç S
    ‚Üí Œì ‚ä¢ ref q e ‚¶Ç (Ref S wf ^ q)

  TDeref : {wf : q-of S ‚â§ q}
    ‚Üí Œì ‚ä¢ e ‚¶Ç (Ref S wf ^ q)
    ‚Üí Œì ‚ä¢ deref q e ‚¶Ç S

  TSetref : {wf : q-of S ‚â§ q}
    ‚Üí Œì ‚ä¢ e‚ÇÅ ‚¶Ç (Ref S wf ^ q)
    ‚Üí Œì ‚ä¢ e‚ÇÇ ‚¶Ç S
    ‚Üí Œì ‚ä¢ setref e‚ÇÅ e‚ÇÇ ‚¶Ç (Unit ^ ùüö)

-- typing is closed under context subtyping

-- q-Bounded-<<‚¶Ç : Œì‚Ä≤ <<‚¶Ç Œì ‚Üí q-Bounded q Œì Œì‚Ä≥ ‚Üí ‚àÉ[ Œì‚Ä¥ ] Œì‚Ä¥ <<‚¶Ç Œì‚Ä≥ √ó q-Bounded q Œì‚Ä≤ Œì‚Ä¥
-- q-Bounded-<<‚¶Ç ‚àÖ qb-‚àÖ = ‚àÖ , ‚àÖ , qb-‚àÖ
-- q-Bounded-<<‚¶Ç (Œì‚Ä≤<<‚¶ÇŒì ,‚¶Ç S‚Ä≤<‚¶ÇS) (qb-keep qS‚â§ qbdd)
--   with q-Bounded-<<‚¶Ç Œì‚Ä≤<<‚¶ÇŒì qbdd
-- ... | Œì‚Ä¥ , Œì‚Ä¥<<‚¶ÇŒì‚Ä≥ , qbdd-out = (Œì‚Ä¥ , _ ‚¶Ç _ [ _ ]) , (Œì‚Ä¥<<‚¶ÇŒì‚Ä≥ ,‚¶Ç S‚Ä≤<‚¶ÇS) , qb-keep (‚â§-trans (q-of-mono S‚Ä≤<‚¶ÇS) qS‚â§) qbdd-out
-- q-Bounded-<<‚¶Ç (Œì‚Ä≤<<‚¶ÇŒì ,‚¶Ç S‚Ä≤<‚¶ÇS) (qb-drop qbdd f)
--   with q-Bounded-<<‚¶Ç Œì‚Ä≤<<‚¶ÇŒì qbdd
-- ... | Œì‚Ä¥ , Œì‚Ä¥<<‚¶ÇŒì‚Ä≥ , qbdd-out =  Œì‚Ä¥ , Œì‚Ä¥<<‚¶ÇŒì‚Ä≥ , qb-drop qbdd-out {!!}

-- context-sub-variable : Œì ‚àã x ‚¶Ç S ‚Üí Œì‚Ä≤ <<‚¶Ç Œì ‚Üí ‚àÉ[ S‚Ä≤ ] S‚Ä≤ <‚¶Ç S √ó Œì‚Ä≤ ‚àã x ‚¶Ç S‚Ä≤
-- context-sub-variable here (_ ,‚¶Ç S‚Ä≤<‚¶ÇS) = _ , S‚Ä≤<‚¶ÇS , here
-- context-sub-variable (there x‚àà x‚â¢) (Œì‚Ä≤<<‚¶ÇŒì ,‚¶Ç _)
--   with context-sub-variable x‚àà Œì‚Ä≤<<‚¶ÇŒì
-- ... | S‚Ä≤ , S‚Ä≤<‚¶ÇS , x‚àà‚Ä≤ = S‚Ä≤ , S‚Ä≤<‚¶ÇS , there x‚àà‚Ä≤ x‚â¢

-- context-subtyping : Œì ‚ä¢ e ‚¶Ç S ‚Üí Œì‚Ä≤ <<‚¶Ç Œì ‚Üí Œì‚Ä≤ ‚ä¢ e ‚¶Ç S
-- context-subtyping TUnit Œì‚Ä≤<<‚¶ÇŒì = TUnit
-- context-subtyping (TVar x‚àà) Œì‚Ä≤<<‚¶ÇŒì
--   with context-sub-variable x‚àà Œì‚Ä≤<<‚¶ÇŒì
-- ... | S‚Ä≤ , S‚Ä≤<‚¶ÇS , x‚àà‚Ä≤ = TSub (TVar x‚àà‚Ä≤) S‚Ä≤<‚¶ÇS
-- context-subtyping {Œì = Œì}{Œì‚Ä≤ = Œì‚Ä≤} (TAbs {S‚â§x = S‚â§x} ‚ä¢e qbdd eq) Œì‚Ä≤<<‚¶ÇŒì
--   with q-Bounded-<<‚¶Ç Œì‚Ä≤<<‚¶ÇŒì qbdd
-- ... | _ , Œì‚Ä¥<<‚¶ÇŒì‚Ä≤ , qbdd-out
--   = TAbs {S‚â§x = S‚â§x} (context-subtyping ‚ä¢e (Œì‚Ä¥<<‚¶ÇŒì‚Ä≤ ,‚¶Ç <‚¶Ç-refl)) qbdd-out eq
-- context-subtyping (TApp ‚ä¢e ‚ä¢e‚ÇÅ) Œì‚Ä≤<<‚¶ÇŒì = TApp (context-subtyping ‚ä¢e Œì‚Ä≤<<‚¶ÇŒì) (context-subtyping ‚ä¢e‚ÇÅ Œì‚Ä≤<<‚¶ÇŒì)
-- context-subtyping (TSub ‚ä¢e x) Œì‚Ä≤<<‚¶ÇŒì = TSub (context-subtyping ‚ä¢e Œì‚Ä≤<<‚¶ÇŒì) x
-- context-subtyping (TSeq x ‚ä¢e ‚ä¢e‚ÇÅ x‚ÇÅ) Œì‚Ä≤<<‚¶ÇŒì = TSeq x (context-subtyping ‚ä¢e Œì‚Ä≤<<‚¶ÇŒì) (context-subtyping ‚ä¢e‚ÇÅ Œì‚Ä≤<<‚¶ÇŒì) x‚ÇÅ
-- context-subtyping (TRef ‚ä¢e qbdd) Œì‚Ä≤<<‚¶ÇŒì
--   with q-Bounded-<<‚¶Ç Œì‚Ä≤<<‚¶ÇŒì qbdd
-- ... | _ , Œì‚Ä¥<<‚¶ÇŒì‚Ä≤ , qbdd-out = TRef (context-subtyping ‚ä¢e Œì‚Ä¥<<‚¶ÇŒì‚Ä≤) qbdd-out 
-- context-subtyping (TDeref ‚ä¢e) Œì‚Ä≤<<‚¶ÇŒì = TDeref (context-subtyping ‚ä¢e Œì‚Ä≤<<‚¶ÇŒì)
-- context-subtyping (TSetref ‚ä¢e ‚ä¢e‚ÇÅ) Œì‚Ä≤<<‚¶ÇŒì = TSetref (context-subtyping ‚ä¢e Œì‚Ä≤<<‚¶ÇŒì) (context-subtyping ‚ä¢e‚ÇÅ Œì‚Ä≤<<‚¶ÇŒì)


-- heap & stack typing

_‚Üì‚Ä≤_ : List Val ‚Üí Maybe ‚Ñï ‚Üí Maybe Val
xs ‚Üì‚Ä≤ nothing = nothing
[] ‚Üì‚Ä≤ just i = nothing
(x ‚à∑ xs) ‚Üì‚Ä≤ just zero = just x
(x ‚à∑ xs) ‚Üì‚Ä≤ just (suc i) = xs ‚Üì‚Ä≤ just i

_‚Üì_ : Stack ‚Üí Maybe ‚Ñï ‚Üí Maybe Val
ùì¢ ‚Üì mi = ùì¢ .head ‚Üì‚Ä≤ mi

{-
-- not needed anymore
‚Üì‚Ä≤-mono : ‚àÄ {n : ‚Ñï} {xs : List Val} {mi : Maybe ‚Ñï} {r : Val}
  ‚Üí just r ‚â° take n xs ‚Üì‚Ä≤ mi ‚Üí just r ‚â° xs ‚Üì mi
‚Üì‚Ä≤-mono {suc n} {x ‚à∑ xs} {just zero} refl = refl
‚Üì‚Ä≤-mono {suc n} {x ‚à∑ xs} {just (suc i)} take‚Üì‚â° = ‚Üì‚Ä≤-mono {n} {xs} {just i} take‚Üì‚â°
-}

-- (H,‚àÖ)(x 1) = v
data Access : Env ‚Üí String ‚Üí Val ‚Üí Set where

  here   : Access ‚ü® s ‚âî v , ùìî ‚ü© s v
  there  : Access ùìî s v ‚Üí s‚Ä≤ ‚â¢ s ‚Üí Access ‚ü® s‚Ä≤ ‚âî v‚Ä≤ , ùìî ‚ü© s v

data GenAccess : Env ‚Üí Stack ‚Üí StackMap ‚Üí Var ‚Üí Val ‚Üí Set where

  on-heap   : Access ùìî s v ‚Üí GenAccess ùìî ùì¢ œÉ (X s ùüô) v
  on-stack  : just v ‚â° ùì¢ ‚Üì œÉ s ‚Üí GenAccess ùìî ùì¢ œÉ (X s ùüö) v

-- heap and stack types

Typeof : Qual ‚Üí Set
Typeof ùüô = Type ùüô               -- heap types
Typeof ùüö = QType                -- stack types

_^^_ : (q : Qual) ‚Üí Typeof q ‚Üí QType
ùüô ^^ T = T ^ ùüô
ùüö ^^ S = S

q-^^-‚â§ : {S : Typeof q} ‚Üí q-of (q ^^ S) ‚â§ q
q-^^-‚â§ {ùüô} = ‚â§-refl
q-^^-‚â§ {ùüö} = ‚â§-top

HSType = (q : Qual) ‚Üí List (Typeof q)

variable
  Œ£‚Çï‚Çõ Œ£‚Çï‚Çõ‚Ä≤ Œ£‚Çï‚Çõ‚Ä≥ : HSType

extend-Œ£ : HSType ‚Üí (q : Qual) ‚Üí Typeof q ‚Üí HSType
extend-Œ£ Œ£‚Çï‚Çõ ùüô T ùüô = Œ£‚Çï‚Çõ ùüô ++ [ T ]
extend-Œ£ Œ£‚Çï‚Çõ ùüô T ùüö = Œ£‚Çï‚Çõ ùüö
extend-Œ£ Œ£‚Çï‚Çõ ùüö T ùüô = Œ£‚Çï‚Çõ ùüô
extend-Œ£ Œ£‚Çï‚Çõ ùüö T ùüö = Œ£‚Çï‚Çõ ùüö ++ [ T ]


adjust-stack : HSType ‚Üí List QType ‚Üí HSType
adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ùüô = Œ£‚Çï‚Çõ ùüô
adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ùüö = Œ£‚Çõ


---- heap/stack typing extension

_‚âº_ : HSType ‚Üí HSType ‚Üí Set
Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ = ‚àÄ q ‚Üí ‚àÉ[ qts ] Œ£‚Çï‚Çõ q ++ qts ‚â°  Œ£‚Çï‚Çõ‚Ä≤ q

‚âº-refl : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ
‚âº-refl {Œ£‚Çï‚Çõ} q = [] , ++-identity ≥ (Œ£‚Çï‚Çõ q)

‚âº-trans : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ ‚Üí  Œ£‚Çï‚Çõ‚Ä≤ ‚âº Œ£‚Çï‚Çõ‚Ä≥ ‚Üí  Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≥
‚âº-trans { Œ£‚Çï‚Çõ} Œ£‚âº Œ£‚âº‚Ä≥ q
  with Œ£‚âº q | Œ£‚âº‚Ä≥ q
... | qts1 , eq1 | qts2 , eq2
  rewrite sym eq2 = (qts1 ++ qts2) , trans (sym (++-assoc (Œ£‚Çï‚Çõ q) qts1 qts2)) (cong (_++ qts2) eq1)

‚âº-extend-Œ£ : ‚àÄ q‚ÇÅ S‚ÇÅ ‚Üí Œ£‚Çï‚Çõ ‚âº extend-Œ£ Œ£‚Çï‚Çõ q‚ÇÅ S‚ÇÅ
‚âº-extend-Œ£ ùüô S‚ÇÅ ùüô = [ S‚ÇÅ ] , refl
‚âº-extend-Œ£ ùüô S‚ÇÅ ùüö = [] , (++-identity ≥ _)
‚âº-extend-Œ£ ùüö S‚ÇÅ ùüô = [] , (++-identity ≥ _)
‚âº-extend-Œ£ ùüö S‚ÇÅ ùüö = [ S‚ÇÅ ] , refl

‚âº-adjust : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ : HSType} ‚Üí Œ£‚ÇÅ ‚âº Œ£‚ÇÇ ‚Üí Œ£‚ÇÅ ‚âº adjust-stack Œ£‚ÇÇ (Œ£‚ÇÅ ùüö)
‚âº-adjust ‚âºŒ£‚ÇÅ ùüô = ‚âºŒ£‚ÇÅ ùüô
‚âº-adjust {Œ£‚ÇÅ} ‚âºŒ£‚ÇÅ ùüö = [] , ++-identity ≥ (Œ£‚ÇÅ ùüö)

‚âº-adjust-[] : ‚àÄ {Œ£‚ÇÅ Œ£‚ÇÇ : HSType} ‚Üí adjust-stack Œ£‚ÇÅ [] ‚âº Œ£‚ÇÇ ‚Üí Œ£‚ÇÅ ‚âº adjust-stack Œ£‚ÇÇ (Œ£‚ÇÅ ùüö)
‚âº-adjust-[] ‚âºŒ£‚ÇÅ ùüô = ‚âºŒ£‚ÇÅ ùüô
‚âº-adjust-[] {Œ£‚ÇÅ} ‚âºŒ£‚ÇÅ ùüö = [] , ++-identity ≥ (Œ£‚ÇÅ ùüö)

‚âº‚áílength : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ ‚Üí ‚àÄ q ‚Üí length (Œ£‚Çï‚Çõ q) ‚â§‚Ñï length (Œ£‚Çï‚Çõ‚Ä≤ q)
‚âº‚áílength {Œ£‚Çï‚Çõ} Œ£‚âº q
  with Œ£‚âº q
... | qts , eq
  with length-‚â§ (Œ£‚Çï‚Çõ q) qts
... | r
  rewrite eq
  = r

‚âº-lookup-aux : ‚àÄ {a}{A : Set a} (xs ys zs : List A)
  ‚Üí (eq : xs ++ ys ‚â° zs)
  ‚Üí (i : Fin (length xs))
  ‚Üí lookup (xs ++ ys) (inject‚â§ i (length-‚â§ xs ys)) ‚â° lookup zs (inject‚â§ i (subst (Œª xx ‚Üí length xs ‚â§‚Ñï length xx) eq (length-‚â§ xs ys)))
‚âº-lookup-aux xs ys zs refl i = refl

‚âº-lookup : (Œ£‚âº : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤) ‚Üí ‚àÄ q ‚Üí (i : Fin (length (Œ£‚Çï‚Çõ q))) ‚Üí lookup (Œ£‚Çï‚Çõ q) i ‚â° lookup (Œ£‚Çï‚Çõ‚Ä≤ q) (inject‚â§ i (‚âº‚áílength Œ£‚âº q))
‚âº-lookup {Œ£‚Çï‚Çõ = Œ£‚Çï‚Çõ}{Œ£‚Çï‚Çõ‚Ä≤} Œ£‚âº q i
  using qts , eq ‚Üê Œ£‚âº q
  = trans (lookup-++ (Œ£‚Çï‚Çõ q) qts i) (‚âº-lookup-aux (Œ£‚Çï‚Çõ q) qts (Œ£‚Çï‚Çõ‚Ä≤ q) eq i)

---- value typing & environment agreement

data ‚ü®_‚ü©‚ä¢[_‚¶Ç_] (Œ£‚Çï‚Çõ : HSType) : Val ‚Üí QType ‚Üí Set

record ‚ü®_,_‚ü©‚ä®_/_ (Œ£‚Çï‚Çõ : HSType) (Œì : Context) (ùìî : Env) (ùì¢œÉ : Stack √ó StackMap) : Set where
  inductive
  constructor mk-‚ä®
  field
    ‚ä®-heap : ‚àÄ {s}{T}{v} ‚Üí Œì ‚àã X s ùüô ‚¶Ç (T ^ ùüô) ‚Üí  Access ùìî s v ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
    ‚ä®-stack : let ùì¢ , œÉ = ùì¢œÉ in ‚àÄ {s}{q}{T}{v} ‚Üí Œì ‚àã X s ùüö ‚¶Ç (T ^ q) ‚Üí just v ‚â° (ùì¢ ‚Üì œÉ s) ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ q) ]
open ‚ü®_,_‚ü©‚ä®_/_ public

-- value typing

resolve : Qual ‚Üí StackMap ‚Üí Maybe StackMap
resolve ùüô œÉ = nothing
resolve ùüö œÉ = just œÉ

data ‚ü®_‚ü©‚ä¢[_‚¶Ç_] Œ£‚Çï‚Çõ where {- cf. p 15:11 of WhatIf -}

  TVUnit : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ unit ‚¶Ç (Unit ^ q) ]

  TVCst : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ cst n ‚¶Ç (Base ^ q) ]

  TVClos : ‚àÄ {S‚ÇÅ‚â§x}
    ‚Üí ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / (ùì¢ , œÉ)
    ‚Üí q-Bound q Œì
    ‚Üí (Œì , x ‚¶Ç S‚ÇÅ [ S‚ÇÅ‚â§x ]) ‚ä¢ e ‚¶Ç S‚ÇÇ
    ‚Üí let œÉ? = resolve q œÉ in
      let q‚ÇÇ = q-of S‚ÇÇ in
      let q‚ÇÅ = q-of S‚ÇÅ in
      (wf‚ÇÅ : q‚ÇÅ ‚â§ q)
      (wf‚ÇÇ : q‚ÇÇ ‚â§ q)
    ‚Üí (Fun S‚ÇÅ S‚ÇÇ wf‚ÇÅ wf‚ÇÇ ^ q) <‚¶Ç S
    ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ clos q ùìî œÉ? x e q‚ÇÇ‚Ä≤ ‚¶Ç S ]

  TVRef : ‚àÄ {T : Typeof q}
    ‚Üí (‚Ñì< : ‚Ñì < length (Œ£‚Çï‚Çõ q))
    ‚Üí lookup (Œ£‚Çï‚Çõ q) (from‚Ñï< ‚Ñì<) ‚â° T
    ‚Üí (Ref (q ^^ T) q-^^-‚â§ ^ q) <‚¶Ç S
    ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ ref q ‚Ñì ‚¶Ç S ]

-- heap typing

‚ä¢·µ•-adjust : ‚àÄ {Œ£‚Çõ}
  ‚Üí (‚ä¢v : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç mkQ ùüô T ])
  ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç mkQ ùüô T ]
‚ä®-adjust :  ‚àÄ {Œ£‚Çõ}
  ‚Üí ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / (ùì¢ , œÉ)
  ‚Üí ‚àÄ {ùì¢‚ÇÅ}
  ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / ([] ‚à∑‚Å∫ ùì¢‚ÇÅ , const nothing)

-- stack adjustment does not happen for a stack-allocated closure
-- in this case, the caller's stack is carried over to the callee

‚ä¢·µ•-adjust TVUnit = TVUnit
‚ä¢·µ•-adjust TVCst = TVCst
‚ä¢·µ•-adjust (TVClos {ùì¢ = ùì¢} {q = ùüô} ‚ä®ùìî qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ <‚¶ÇS) = TVClos (‚ä®-adjust ‚ä®ùìî {ùì¢}) qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ <‚¶ÇS
‚ä¢·µ•-adjust (TVClos {q = ùüö} ‚ä®ùìî qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ (SQual () x))
‚ä¢·µ•-adjust (TVRef {q = ùüô} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef ‚Ñì< lkup‚â° <‚¶ÇS
‚ä¢·µ•-adjust (TVRef {q = ùüö} ‚Ñì< lkup‚â° (SQual () x))

‚ä®-adjust ‚ä®ùìî = mk-‚ä® (Œª x‚àà acc ‚Üí ‚ä¢·µ•-adjust (‚ä®-heap ‚ä®ùìî x‚àà acc)) (Œª{ x‚àà () })
{-

‚ä¢·µ•-adjust-ùüö : ‚àÄ { vs : List Val} {Œ£‚Çõ : List (Type ùüö)}
  ‚Üí Pointwise (Œª v T ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüö) ]) vs Œ£‚Çõ
  ‚Üí (‚ä¢v : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüö) ])
  ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüö) ]

‚ä¢·µ•-adjust-ùüö ‚ä¢‚Çõvs TVUnit = TVUnit
‚ä¢·µ•-adjust-ùüö ‚ä¢‚Çõvs TVCst = TVCst
‚ä¢·µ•-adjust-ùüö ‚ä¢‚Çõvs (TVClos x x‚ÇÅ x‚ÇÇ x‚ÇÉ wf‚ÇÇ x‚ÇÑ) = {!!}
‚ä¢·µ•-adjust-ùüö ‚ä¢‚Çõvs (TVRef {q = ùüô} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef ‚Ñì< lkup‚â° <‚¶ÇS
‚ä¢·µ•-adjust-ùüö ‚ä¢‚Çõvs (TVRef {q = ùüö} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef {!!} {!!} <‚¶ÇS
-}

_‚ä¢‚Çï_ : HSType ‚Üí Heap ‚Üí Set
Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó = Pointwise (Œª v T ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô)]) ùìó (Œ£‚Çï‚Çõ ùüô)

‚ä¢‚Çï‚Çõ-length-aux : ‚àÄ {q}{Œ£‚Çï} {vs : List Val} ‚Üí Pointwise (Œª x y ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ x ‚¶Ç (q ^^ y) ]) vs Œ£‚Çï ‚Üí length Œ£‚Çï ‚â° length vs
‚ä¢‚Çï‚Çõ-length-aux [] = refl
‚ä¢‚Çï‚Çõ-length-aux (x‚àºy ‚à∑ pws) = cong suc (‚ä¢‚Çï‚Çõ-length-aux pws)

‚ä¢‚Çï-length : Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó ‚Üí length (Œ£‚Çï‚Çõ ùüô) ‚â° length ùìó
‚ä¢‚Çï-length ‚ä¢ùìó = ‚ä¢‚Çï‚Çõ-length-aux ‚ä¢ùìó


‚ä¢‚Çï-adjust-aux : ‚àÄ {Œ£‚Çï}{vs vs‚Ä≤ : List Val}
  ‚Üí ‚àÄ Œ£‚Çõ
  ‚Üí Pointwise (Œª v S ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]) vs‚Ä≤ Œ£‚Çõ
  ‚Üí Pointwise (Œª v T ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô)]) vs Œ£‚Çï
  ‚Üí Pointwise (Œª v T ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô)]) vs Œ£‚Çï
‚ä¢‚Çï-adjust-aux Œ£‚Çõ ‚ä¢‚Çõvs [] = []
‚ä¢‚Çï-adjust-aux Œ£‚Çõ ‚ä¢‚Çõvs (x‚àºy ‚à∑ pws) = ‚ä¢·µ•-adjust x‚àºy ‚à∑ ‚ä¢‚Çï-adjust-aux Œ£‚Çõ ‚ä¢‚Çõvs pws


‚ä¢‚Çï-adjust : ‚àÄ {vs : List Val}
  ‚Üí ‚àÄ Œ£‚Çõ
  ‚Üí Pointwise (Œª v S ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]) vs Œ£‚Çõ
  ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó
  ‚Üí adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ä¢‚Çï ùìó
‚ä¢‚Çï-adjust Œ£‚Çõ ‚ä¢‚Çõvs ‚ä¢ùìó = ‚ä¢‚Çï-adjust-aux Œ£‚Çõ ‚ä¢‚Çõvs ‚ä¢ùìó

-- stack typing

_‚ä¢‚Çõ_ : HSType ‚Üí Stack ‚Üí Set
Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢ = Pointwise (Œª v S ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]) (ùì¢ .head) (Œ£‚Çï‚Çõ ùüö)

‚ä¢‚Çõ-length : Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢ ‚Üí length (Œ£‚Çï‚Çõ ùüö) ‚â° length (ùì¢ .head)
‚ä¢‚Çõ-length ‚ä¢ùì¢ = ‚ä¢‚Çï‚Çõ-length-aux ‚ä¢ùì¢

{-
‚ä¢‚Çõ-adjust-aux : ‚àÄ {vs : List Val} {Œ£‚Çõ : List QType}
  ‚Üí Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤
  ‚Üí Pointwise (Œª v S ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]) vs Œ£‚Çõ
  ‚Üí Pointwise (Œª v S ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ‚Ä≤ (Œ£‚Çï‚Çõ ùüö) ‚ü©‚ä¢[ v ‚¶Ç S ]) vs Œ£‚Çõ
‚ä¢‚Çõ-adjust-aux ‚âºŒ£ [] = []
‚ä¢‚Çõ-adjust-aux ‚âºŒ£ (x‚àºy ‚à∑ pws) = {! !} ‚à∑ (‚ä¢‚Çõ-adjust-aux ‚âºŒ£ pws)

‚ä¢‚Çõ-adjust :
  Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤
  ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí adjust-stack Œ£‚Çï‚Çõ‚Ä≤ (Œ£‚Çï‚Çõ ùüö) ‚ä¢‚Çõ ùì¢
‚ä¢‚Çõ-adjust ‚âºŒ£ ‚ä¢ùì¢ = ‚ä¢‚Çõ-adjust-aux ‚âºŒ£ ‚ä¢ùì¢
-}

‚ä¢·µ•-adjust-[] :
  adjust-stack Œ£‚Çï‚Çõ [] ‚âº Œ£‚Çï‚Çõ‚Ä≤
  ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
  ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ‚Ä≤ (Œ£‚Çï‚Çõ ùüö) ‚ü©‚ä¢[ v ‚¶Ç S ]
‚ä¢·µ•-adjust-[] ‚âºŒ£ TVUnit = TVUnit
‚ä¢·µ•-adjust-[] ‚âºŒ£ TVCst = TVCst
‚ä¢·µ•-adjust-[] ‚âºŒ£ (TVClos ‚ä®ùìî qbd ‚ä¢e wf‚ÇÅ wf‚ÇÇ <‚¶ÇS) = {!!}
‚ä¢·µ•-adjust-[] {Œ£‚Çï‚Çõ} ‚âºŒ£ (TVRef {ùüô} ‚Ñì< lkup‚â° <‚¶ÇS)
  with ‚âºŒ£ ùüô in eq
... | qts , eq1  
  = TVRef (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength ‚âºŒ£ ùüô)) (trans (lookup-from-i‚Ä≤ (Œ£‚Çï‚Çõ ùüô) ‚Ñì< eq1) lkup‚â°) <‚¶ÇS
‚ä¢·µ•-adjust-[] ‚âºŒ£ (TVRef {ùüö} ‚Ñì< lkup‚â° <‚¶ÇS) = TVRef ‚Ñì< lkup‚â° <‚¶ÇS

‚ä¢‚Çõ-adjust-aux-[] : ‚àÄ {vs : List Val} {Œ£‚Çõ : List QType}
  ‚Üí adjust-stack Œ£‚Çï‚Çõ [] ‚âº Œ£‚Çï‚Çõ‚Ä≤
  ‚Üí Pointwise (Œª v S ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]) vs Œ£‚Çõ
  ‚Üí Pointwise (Œª v S ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ‚Ä≤ (Œ£‚Çï‚Çõ ùüö) ‚ü©‚ä¢[ v ‚¶Ç S ]) vs Œ£‚Çõ
‚ä¢‚Çõ-adjust-aux-[] ‚âºŒ£ [] = []
‚ä¢‚Çõ-adjust-aux-[] ‚âºŒ£ (x‚àºy ‚à∑ pws) = ‚ä¢·µ•-adjust-[] ‚âºŒ£ x‚àºy ‚à∑ (‚ä¢‚Çõ-adjust-aux-[] ‚âºŒ£ pws)


‚ä¢‚Çõ-adjust-[] :
  adjust-stack Œ£‚Çï‚Çõ [] ‚âº Œ£‚Çï‚Çõ‚Ä≤
  ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí adjust-stack Œ£‚Çï‚Çõ‚Ä≤ (Œ£‚Çï‚Çõ ùüö) ‚ä¢‚Çõ ùì¢
‚ä¢‚Çõ-adjust-[] ‚âºŒ£ ‚ä¢ùì¢ = ‚ä¢‚Çõ-adjust-aux-[] ‚âºŒ£ ‚ä¢ùì¢

-- value typing extends

‚ä®-extend-Œ£ : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ ‚Üí ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢œÉ ‚Üí ‚ü® Œ£‚Çï‚Çõ‚Ä≤ , Œì ‚ü©‚ä® ùìî / ùì¢œÉ

[‚¶Ç]-‚âº : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ] ‚Üí ‚ü® Œ£‚Çï‚Çõ‚Ä≤ ‚ü©‚ä¢[ v ‚¶Ç S ]
[‚¶Ç]-‚âº Œ£‚âº TVUnit = TVUnit
[‚¶Ç]-‚âº Œ£‚âº TVCst = TVCst
[‚¶Ç]-‚âº Œ£‚âº (TVClos ‚ä®ùìî qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ <‚¶ÇS) = TVClos (‚ä®-extend-Œ£ Œ£‚âº ‚ä®ùìî) qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ <‚¶ÇS
[‚¶Ç]-‚âº {Œ£‚Çï‚Çõ = Œ£‚Çï‚Çõ} Œ£‚âº (TVRef {q = q} ‚Ñì< lkup‚â° <‚¶ÇS)
  with Œ£‚âº q in eq
... | qts , eq1 = TVRef (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength Œ£‚âº q)) (trans (lookup-from-i‚Ä≤ (Œ£‚Çï‚Çõ q) ‚Ñì< eq1) lkup‚â°) <‚¶ÇS

-- agreement extends


‚ä®-extend-Œ£ Œ£‚âº ‚ä®Œì = mk-‚ä® (Œª x‚àà acc ‚Üí [‚¶Ç]-‚âº Œ£‚âº (‚ä®-heap ‚ä®Œì x‚àà acc))
                        (Œª x‚àà v‚â° ‚Üí [‚¶Ç]-‚âº Œ£‚âº (‚ä®-stack ‚ä®Œì x‚àà v‚â°))


-- heap typing extends (needed?)

‚ä¢‚Çï-‚âº-aux : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ ‚Üí ‚àÄ {Œ£‚Çï} ‚Üí Pointwise (‚ü®_‚ü©‚ä¢[_‚¶Ç_] Œ£‚Çï‚Çõ) ùìó Œ£‚Çï ‚Üí Pointwise (‚ü®_‚ü©‚ä¢[_‚¶Ç_] Œ£‚Çï‚Çõ‚Ä≤) ùìó Œ£‚Çï
‚ä¢‚Çï-‚âº-aux Œ£‚âº [] = []
‚ä¢‚Çï-‚âº-aux Œ£‚âº (x‚àºy ‚à∑ pws) = ([‚¶Ç]-‚âº Œ£‚âº x‚àºy) ‚à∑ (‚ä¢‚Çï-‚âº-aux Œ£‚âº pws)

{-
‚ä¢‚Çï-‚âº : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó ‚Üí Œ£‚Çï‚Çõ‚Ä≤ ‚ä¢‚Çï ùìó
‚ä¢‚Çï-‚âº {Œ£‚Çï‚Çõ} Œ£‚âº ‚ä¢ùìó = {!‚ä¢‚Çï-‚âº-aux Œ£‚âº {Œ£‚Çï‚Çõ ùüô} ‚ä¢ùìó!}
-}


rename-bounded‚Ä≤ : q-Bounded q Œì Œì‚Ä≤ ‚Üí Œì‚Ä≤ ‚àã x ‚¶Ç S ‚Üí Œì ‚àã x ‚¶Ç S
rename-bounded‚Ä≤ (qb-keep x qbdd) (here) = here
rename-bounded‚Ä≤ (qb-keep x qbdd) (there x‚àà x‚â¢) = there (rename-bounded‚Ä≤ qbdd x‚àà) x‚â¢
rename-bounded‚Ä≤ (qb-drop qbdd f) x‚àà = there (rename-bounded‚Ä≤ qbdd x‚àà) (f x‚àà)

restrict‚Ä≤ : ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢œÉ ‚Üí q-Bounded q Œì Œì‚Ä≤ ‚Üí ‚ü® Œ£‚Çï‚Çõ , Œì‚Ä≤ ‚ü©‚ä® ùìî / ùì¢œÉ
restrict‚Ä≤ {ùì¢œÉ = ùì¢ , œÉ} Œì‚ä® qbdd = mk-‚ä® (Œª x‚àà access ‚Üí ‚ä®-heap Œì‚ä® (rename-bounded‚Ä≤ qbdd x‚àà) access)
                                      (Œª x‚àà v‚â° ‚Üí ‚ä®-stack Œì‚ä® (rename-bounded‚Ä≤ qbdd x‚àà) v‚â°)


‚ä®-extend-ùüô : ‚àÄ s T ‚Üí (‚ä¢v : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô)]) ‚Üí ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢œÉ ‚Üí ‚ü® Œ£‚Çï‚Çõ , (Œì , X s ùüô ‚¶Ç (T ^ ùüô) [ refl ]) ‚ü©‚ä® ‚ü® s ‚âî v , ùìî ‚ü© / ùì¢œÉ
‚ä®-extend-ùüô s T ‚ä¢v ‚ä®Œì = mk-‚ä® (Œª{ here here ‚Üí ‚ä¢v
                              ; here (there x‚àà x‚â¢x) ‚Üí ‚ä•-elim (x‚â¢x refl)
                              ; (there x‚àà x‚â¢x) here ‚Üí ‚ä•-elim (x‚â¢x refl)
                              ; (there x‚àà x‚â¢) (there access s‚â¢) ‚Üí ‚ä®-heap ‚ä®Œì x‚àà access})
                            Œª{ (there x‚àà x‚â¢) v‚â° ‚Üí ‚ä®-stack ‚ä®Œì x‚àà v‚â°}


access-soundness : ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / ùì¢œÉ ‚Üí Œì ‚àã X s ùüô ‚¶Ç (T ^ ùüô) ‚Üí Access ùìî s v ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
access-soundness Œì‚ä® x‚àà access = ‚ä®-heap Œì‚ä® x‚àà access

genaccess-soundness : ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / (ùì¢ , œÉ) ‚Üí Œì ‚àã x ‚¶Ç (T ^ q) ‚Üí GenAccess ùìî ùì¢ œÉ x v ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ q) ]
genaccess-soundness {ùì¢ = ùì¢} {œÉ} {q = ùüô} Œì‚ä® x‚àà (on-heap x) = access-soundness Œì‚ä® x‚àà x
genaccess-soundness {ùì¢ = ùì¢} {œÉ} {q = ùüö} Œì‚ä® x‚àà (on-heap x) = ‚ä•-elim (¬¨2‚â§1 (q-var-type x‚àà))
genaccess-soundness Œì‚ä® x‚àà (on-stack x) = ‚ä®-stack Œì‚ä® x‚àà x


<‚¶Ç-val-lift : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S‚ÇÅ ] ‚Üí S‚ÇÅ <‚¶Ç S‚ÇÇ ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S‚ÇÇ ]
<‚¶Ç-val-lift TVUnit (SQual qsub SUnit) = TVUnit
<‚¶Ç-val-lift TVCst (SQual qsub SBase) = TVCst
<‚¶Ç-val-lift (TVClos ‚ä®ùìî qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ <‚¶ÇS‚ÇÅ) S‚ÇÅ<‚¶ÇS‚ÇÇ = TVClos ‚ä®ùìî qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ (<‚¶Ç-trans <‚¶ÇS‚ÇÅ S‚ÇÅ<‚¶ÇS‚ÇÇ)
<‚¶Ç-val-lift (TVRef ‚Ñì< lkup‚â° <‚¶ÇS‚ÇÅ) S‚ÇÅ<‚¶ÇS‚ÇÇ = TVRef ‚Ñì< lkup‚â° (<‚¶Ç-trans <‚¶ÇS‚ÇÅ S‚ÇÅ<‚¶ÇS‚ÇÇ)


-- operational semantics

data read : List Val ‚Üí ‚Ñï ‚Üí Val ‚Üí Set where

  read0 : read (v ‚à∑ vs) zero v
  read1 : read vs n v ‚Üí read (v‚Ä≤ ‚à∑ vs) (suc n) v

data sread : Stack ‚Üí ‚Ñï ‚Üí Val ‚Üí Set where

  sread0 : read (ùì¢ .head) ‚Ñì v ‚Üí sread ùì¢ ‚Ñì v

data write : List Val ‚Üí ‚Ñï ‚Üí Val ‚Üí List Val ‚Üí Set where

  write0 : write (v‚Ä≤ ‚à∑ vs) zero v (v ‚à∑ vs)
  write1 : write vs n v vs‚Ä≤ ‚Üí write (v‚Ä≤ ‚à∑ vs) (suc n) v (v‚Ä≤ ‚à∑ vs‚Ä≤)

data swrite : Stack ‚Üí ‚Ñï ‚Üí Val ‚Üí Stack ‚Üí Set where

  swrite0 : write vs ‚Ñì v vs‚Ä≤ ‚Üí swrite (vs ‚à∑ ùìõ) ‚Ñì v (vs‚Ä≤ ‚à∑ ùìõ)

typed-read-aux : ‚àÄ {q}{T : Typeof q}{Œ£‚Çï : List (Typeof q)}
  ‚Üí Pointwise (Œª v T ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (q ^^ T) ] ) ùìó Œ£‚Çï
  ‚Üí {‚Ñì : ‚Ñï}
  ‚Üí (‚Ñì< : ‚Ñì < length Œ£‚Çï)
  ‚Üí (lkup‚â° : lookup Œ£‚Çï (from‚Ñï< ‚Ñì<) ‚â° T)
  ‚Üí read ùìó ‚Ñì v
  ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (q ^^ T) ]
typed-read-aux (x‚àºy ‚à∑ pws) {zero} ‚Ñì< refl read0 = x‚àºy
typed-read-aux (x‚àºy ‚à∑ pws) {suc ‚Ñì} (s‚â§s ‚Ñì<) lkup‚â° (read1 rd) = typed-read-aux pws {‚Ñì} ‚Ñì< lkup‚â° rd

typed-read : Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó
  ‚Üí (‚Ñì< : ‚Ñì < length (Œ£‚Çï‚Çõ ùüô))
  ‚Üí (lkup‚â° : lookup (Œ£‚Çï‚Çõ ùüô) (from‚Ñï< ‚Ñì<) ‚â° T)
  ‚Üí read ùìó ‚Ñì v
  ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
typed-read {Œ£‚Çï‚Çõ = Œ£‚Çï‚Çõ} ‚ä¢ùìó ‚Ñì< lkup‚â° xread = typed-read-aux {Œ£‚Çï = Œ£‚Çï‚Çõ ùüô}  ‚ä¢ùìó ‚Ñì< lkup‚â° xread 

typed-sread : Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí (‚Ñì< : ‚Ñì < length (Œ£‚Çï‚Çõ ùüö))
  ‚Üí (lkup‚â° : lookup (Œ£‚Çï‚Çõ ùüö) (from‚Ñï< ‚Ñì<) ‚â° S)
  ‚Üí sread ùì¢ ‚Ñì v
  ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
typed-sread {Œ£‚Çï‚Çõ = Œ£‚Çï‚Çõ} ‚ä¢ùì¢ ‚Ñì< lkup‚â° (sread0 xread) = typed-read-aux {Œ£‚Çï = Œ£‚Çï‚Çõ ùüö} ‚ä¢ùì¢ ‚Ñì< lkup‚â° xread

typed-write-aux : ‚àÄ {q}{T : Typeof q}{Œ£‚Çï}
  ‚Üí Pointwise (Œª w T ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ w ‚¶Ç (q ^^ T) ] ) ùìó Œ£‚Çï
  ‚Üí {‚Ñì : ‚Ñï}
  ‚Üí (‚Ñì< : ‚Ñì < length Œ£‚Çï)
  ‚Üí (lkup‚â° : lookup Œ£‚Çï (from‚Ñï< ‚Ñì<) ‚â° T)
  ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (q ^^ T) ]
  ‚Üí write ùìó ‚Ñì v ùìó‚Ä≤
  ‚Üí Pointwise (Œª w T ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ w ‚¶Ç (q ^^ T) ] ) ùìó‚Ä≤ Œ£‚Çï
typed-write-aux (x‚àºy ‚à∑ pws) {zero} ‚Ñì< refl ‚ä¢v write0 = ‚ä¢v ‚à∑ pws
typed-write-aux (x‚àºy ‚à∑ pws) {suc ‚Ñì} (s‚â§s ‚Ñì<) lkup‚â° ‚ä¢v (write1 xwrite) = x‚àºy ‚à∑ (typed-write-aux pws ‚Ñì< lkup‚â° ‚ä¢v xwrite)

typed-write : ‚àÄ {T : Type ùüô}
  ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó
  ‚Üí (‚Ñì< : ‚Ñì < length (Œ£‚Çï‚Çõ ùüô))
  ‚Üí (lkup‚â° : lookup (Œ£‚Çï‚Çõ ùüô) (from‚Ñï< ‚Ñì<) ‚â° T)
  ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T ^ ùüô) ]
  ‚Üí write ùìó ‚Ñì v ùìó‚Ä≤
  ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó‚Ä≤
typed-write {Œ£‚Çï‚Çõ = Œ£‚Çï‚Çõ} ‚ä¢ùìó ‚Ñì< lkup‚â° ‚ä¢v xwrite = typed-write-aux {Œ£‚Çï = Œ£‚Çï‚Çõ ùüô} ‚ä¢ùìó ‚Ñì< lkup‚â° ‚ä¢v xwrite

typed-swrite : ‚àÄ {S}
  ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí (‚Ñì< : ‚Ñì < length (Œ£‚Çï‚Çõ ùüö))
  ‚Üí (lkup‚â° : lookup (Œ£‚Çï‚Çõ ùüö) (from‚Ñï< ‚Ñì<) ‚â° S)
  ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
  ‚Üí swrite ùì¢ ‚Ñì v ùì¢‚Ä≤
  ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢‚Ä≤
typed-swrite {Œ£‚Çï‚Çõ = Œ£‚Çï‚Çõ} ‚ä¢ùì¢ ‚Ñì< lkup‚â° ‚ä¢v (swrite0 xwrite) = typed-write-aux {Œ£‚Çï = Œ£‚Çï‚Çõ ùüö} ‚ä¢ùì¢ ‚Ñì< lkup‚â° ‚ä¢v xwrite

‚ä¢ùìó-extend-ùüô-aux : ‚àÄ {Œ£‚Çï} ‚Üí (T : Type ùüô) (‚ä¢v : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç mkQ ùüô T ])
  ‚Üí (‚ä¢ùìó    : Pointwise (Œª v T ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç T ^ ùüô ]) ùìó Œ£‚Çï)
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® (extend-Œ£ Œ£‚Çï‚Çõ ùüô T) ‚ü©‚ä¢[ v ‚¶Ç (T‚Ä≤ ^ ùüô)] ) (ùìó ++ v ‚à∑ []) (Œ£‚Çï ++ [ T ])
‚ä¢ùìó-extend-ùüô-aux T ‚ä¢v [] = [‚¶Ç]-‚âº (‚âº-extend-Œ£ ùüô T) ‚ä¢v ‚à∑ []
‚ä¢ùìó-extend-ùüô-aux T ‚ä¢v (x‚àºy ‚à∑ ‚ä¢ùìó) = [‚¶Ç]-‚âº (‚âº-extend-Œ£ ùüô T) x‚àºy ‚à∑ (‚ä¢ùìó-extend-ùüô-aux T ‚ä¢v ‚ä¢ùìó)

‚ä¢ùìó-extend-ùüô : (T : Type ùüô) (‚ä¢v : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç mkQ ùüô T ]) (‚ä¢ùìó : Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó)
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® (extend-Œ£ Œ£‚Çï‚Çõ ùüô T) ‚ü©‚ä¢[ v ‚¶Ç (T‚Ä≤ ^ ùüô)] ) (ùìó ++ v ‚à∑ []) (Œ£‚Çï‚Çõ ùüô ++ [ T ])
‚ä¢ùìó-extend-ùüô T ‚ä¢v ‚ä¢ùìó = ‚ä¢ùìó-extend-ùüô-aux T ‚ä¢v ‚ä¢ùìó

‚ä¢ùì¢-extend-ùüô-aux : ‚àÄ {Œ£‚Çõ} {xs : List Val} ‚Üí (T : Type ùüô)
  ‚Üí (‚ä¢ùì¢ : Pointwise (Œª v S ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]) xs Œ£‚Çõ)
  ‚Üí Pointwise (Œª v S ‚Üí ‚ü® (extend-Œ£ Œ£‚Çï‚Çõ ùüô T) ‚ü©‚ä¢[ v ‚¶Ç S ]) xs Œ£‚Çõ
‚ä¢ùì¢-extend-ùüô-aux T [] = []
‚ä¢ùì¢-extend-ùüô-aux T (x‚àºy ‚à∑ ‚ä¢ùì¢) = ([‚¶Ç]-‚âº (‚âº-extend-Œ£ ùüô T) x‚àºy) ‚à∑ (‚ä¢ùì¢-extend-ùüô-aux T ‚ä¢ùì¢)

‚ä¢ùì¢-extend-ùüô : (T : Type ùüô) ‚Üí (‚ä¢ùì¢ : Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢) ‚Üí extend-Œ£ Œ£‚Çï‚Çõ ùüô T ‚ä¢‚Çõ ùì¢
‚ä¢ùì¢-extend-ùüô T ‚ä¢ùì¢ = ‚ä¢ùì¢-extend-ùüô-aux T ‚ä¢ùì¢

‚ä¢ùìó-extend-ùüö-aux : ‚àÄ {Œ£‚Çõ} {xs : List Val} ‚Üí (S : QType)
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç (T‚Ä≤ ^ ùüô)]) xs Œ£‚Çõ
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® (extend-Œ£ Œ£‚Çï‚Çõ ùüö S) ‚ü©‚ä¢[ v ‚¶Ç (T‚Ä≤ ^ ùüô)] ) xs Œ£‚Çõ
‚ä¢ùìó-extend-ùüö-aux S [] = []
‚ä¢ùìó-extend-ùüö-aux S (x‚àºy ‚à∑ pws) = ([‚¶Ç]-‚âº (‚âº-extend-Œ£ ùüö S) x‚àºy) ‚à∑ ‚ä¢ùìó-extend-ùüö-aux S pws

‚ä¢ùìó-extend-ùüö : (S : QType) ‚Üí (‚ä¢ùìó : Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó) ‚Üí extend-Œ£ Œ£‚Çï‚Çõ ùüö S ‚ä¢‚Çï ùìó
‚ä¢ùìó-extend-ùüö S ‚ä¢ùìó = ‚ä¢ùìó-extend-ùüö-aux S ‚ä¢ùìó

‚ä¢ùì¢-extend-ùüö-aux : ‚àÄ {Œ£‚Çõ : List QType} {xs : List Val}
  ‚Üí (T : QType) (‚ä¢v : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç T ])
  ‚Üí (‚ä¢ùì¢ : Pointwise (Œª v S‚Ä≤ ‚Üí ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S‚Ä≤ ]) xs Œ£‚Çõ)
  ‚Üí Pointwise (Œª v S‚Ä≤ ‚Üí ‚ü® (extend-Œ£ Œ£‚Çï‚Çõ ùüö T) ‚ü©‚ä¢[ v ‚¶Ç S‚Ä≤ ] ) (xs ++ [ v ]) (Œ£‚Çõ ++ [ T ])
‚ä¢ùì¢-extend-ùüö-aux T ‚ä¢v [] = [‚¶Ç]-‚âº (‚âº-extend-Œ£ ùüö T) ‚ä¢v ‚à∑ []
‚ä¢ùì¢-extend-ùüö-aux T ‚ä¢v (x‚àºy ‚à∑ pws) = ([‚¶Ç]-‚âº (‚âº-extend-Œ£ ùüö T) x‚àºy) ‚à∑ ‚ä¢ùì¢-extend-ùüö-aux T ‚ä¢v pws

‚ä¢ùì¢-extend-ùüö : (T : QType) (‚ä¢v : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç T ])
  ‚Üí (‚ä¢ùì¢ : Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢)
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® (extend-Œ£ Œ£‚Çï‚Çõ ùüö T) ‚ü©‚ä¢[ v ‚¶Ç T‚Ä≤ ]) (ùì¢ .head ++ [ v ]) (Œ£‚Çï‚Çõ ùüö ++ [ T ])
‚ä¢ùì¢-extend-ùüö S ‚ä¢v ‚ä¢ùì¢ = ‚ä¢ùì¢-extend-ùüö-aux S ‚ä¢v ‚ä¢ùì¢

{-
postulate
  ‚ä¢ùì¢-revert-ùüö-value : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]
    ‚Üí (Œ£‚Çõ : List (Type ùüö))
    ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç S ]

‚ä¢ùìó-revert-ùüö-env : ‚ü® Œ£‚Çï‚Çõ‚Ä≤ , Œì ‚ü©‚ä® ùìî / (ùì¢ , œÉ) ‚Üí (Œ£‚Çõ : List (Type ùüö))
  ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ‚Ä≤ Œ£‚Çõ , Œì ‚ü©‚ä® ùìî / (take (length Œ£‚Çõ) ùì¢ , œÉ)
‚ä¢ùìó-revert-ùüö-value : ‚ü® Œ£‚Çï‚Çõ ‚ü©‚ä¢[ v ‚¶Ç mkQ ùüô T ]
  ‚Üí (Œ£‚Çõ : List (Type ùüö))
  ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ Œ£‚Çõ ‚ü©‚ä¢[ v ‚¶Ç mkQ ùüô T ]

‚ä¢ùìó-revert-ùüö-env {ùì¢ = ùì¢}{œÉ = œÉ} ‚ä®ùìî Œ£‚Çõ = mk-‚ä® (Œª x‚àà x‚â¢ ‚Üí ‚ä¢ùìó-revert-ùüö-value (‚ä®-heap ‚ä®ùìî x‚àà x‚â¢) Œ£‚Çõ)
                                             (Œª {s = s} x‚àà v‚â° ‚Üí ‚ä¢ùì¢-revert-ùüö-value (‚ä®-stack ‚ä®ùìî x‚àà (‚Üì-mono {n = length Œ£‚Çõ}{xs = ùì¢}{mi = œÉ s} v‚â°)) Œ£‚Çõ )

‚ä¢ùìó-revert-ùüö-value TVUnit Œ£‚Çõ = TVUnit
‚ä¢ùìó-revert-ùüö-value TVCst Œ£‚Çõ = TVCst
‚ä¢ùìó-revert-ùüö-value (TVClos ‚ä®ùìî qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ <‚¶ÇS) Œ£‚Çõ = TVClos (‚ä¢ùìó-revert-ùüö-env ‚ä®ùìî Œ£‚Çõ) qbd ‚ä¢e œÉ?‚â° wf‚ÇÇ <‚¶ÇS
‚ä¢ùìó-revert-ùüö-value (TVRef ‚Ñì< lkup‚â° (SQual ‚â§-refl <‚¶Ç‚Ä≤T)) Œ£‚Çõ = TVRef ‚Ñì< lkup‚â° (SQual ‚â§-refl <‚¶Ç‚Ä≤T)

‚ä¢ùìó-revert-ùüö-aux : ‚àÄ {Œ£‚Çï} {xs : List Val}
  ‚Üí Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® Œ£‚Çï‚Çõ‚Ä≤ ‚ü©‚ä¢[ v ‚¶Ç (T‚Ä≤ ^ ùüô)]) xs Œ£‚Çï
  ‚Üí Pointwise (Œª v T‚Ä≤ ‚Üí ‚ü® adjust-stack Œ£‚Çï‚Çõ‚Ä≤ (Œ£‚Çï‚Çõ ùüö) ‚ü©‚ä¢[ v ‚¶Ç (T‚Ä≤ ^ ùüô)]) xs Œ£‚Çï
‚ä¢ùìó-revert-ùüö-aux ‚âºŒ£ [] = []
‚ä¢ùìó-revert-ùüö-aux {Œ£‚Çï‚Çõ = Œ£‚Çï‚Çõ} ‚âºŒ£ (x‚àºy ‚à∑ pws) = ‚ä¢ùìó-revert-ùüö-value x‚àºy (Œ£‚Çï‚Çõ ùüö) ‚à∑ (‚ä¢ùìó-revert-ùüö-aux ‚âºŒ£ pws)

‚ä¢ùìó-revert-ùüö : Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ ‚Üí (‚ä¢ùìó : Œ£‚Çï‚Çõ‚Ä≤ ‚ä¢‚Çï ùìó) ‚Üí adjust-stack Œ£‚Çï‚Çõ‚Ä≤ (Œ£‚Çï‚Çõ ùüö) ‚ä¢‚Çï ùìó
‚ä¢ùìó-revert-ùüö ‚âºŒ£ ‚ä¢ùìó = ‚ä¢ùìó-revert-ùüö-aux ‚âºŒ£ ‚ä¢ùìó
-}

-- -- UNSAFE --
-- postulate
--   ‚â≤-write : swrite ùì¢ n v ùì¢‚Ä≤ ‚Üí ùì¢ ‚â≤ ùì¢‚Ä≤

‚à£_‚à£ ∞ = length

‚à£_‚à£À¢ : Stack ‚Üí ‚Ñï
‚à£_‚à£À¢ = length ‚àò head

push : Stack ‚Üí Val ‚Üí Stack
push (vs ‚à∑ ùìõ) v = ((vs ++ [ v ]) ‚à∑ ùìõ)

update : StackMap ‚Üí Ident ‚Üí ‚Ñï ‚Üí StackMap
update œÉ x n = Œª s ‚Üí case (x ‚âü s) of Œª where
  (no ¬¨a) ‚Üí œÉ s
  (yes a) ‚Üí just n

_‚äï‚Çï_ : Env ‚Üí (Var √ó Val) ‚Üí Env
ùìî ‚äï‚Çï (X s ùüô , v) = ‚ü® s ‚âî v , ùìî ‚ü©
ùìî ‚äï‚Çï (X s ùüö , v) = ùìî

_‚äï‚Çõ_ : (Stack √ó StackMap) ‚Üí (Var √ó Val) ‚Üí (Stack √ó StackMap)
(ùì¢ , œÉ) ‚äï‚Çõ (X s ùüô , v) = (ùì¢ , œÉ)
(ùì¢ , œÉ) ‚äï‚Çõ (X s ùüö , v) =  push ùì¢ v , update œÉ s ‚à£ ùì¢ ‚à£À¢

alloc : Stack ‚Üí Val ‚Üí Stack √ó ‚Ñï
alloc ùì¢ v = push ùì¢ v , ‚à£ ùì¢ ‚à£À¢

alloc-length : ‚àÄ ùì¢ ‚Üí ‚à£ alloc ùì¢ v .proj‚ÇÅ ‚à£À¢ ‚â° suc ‚à£ ùì¢ ‚à£À¢
alloc-length {v = v} ùì¢ = trans (length-++ (ùì¢ .head) {[ v ]}) (trans (+-suc (‚à£ ùì¢ ‚à£À¢) zero) (cong suc (+-identity ≥ ‚à£ ùì¢ ‚à£À¢)))

-- ‚â≤-alloc : ùì¢ ‚â≤ alloc ùì¢ v .proj‚ÇÅ
-- ‚â≤-alloc {ùì¢}{v} .proj‚ÇÅ rewrite alloc-length {v} ùì¢ = n‚â§1+n _
-- ‚â≤-alloc {ùì¢}{v} .proj‚ÇÇ i S lkup = subst (Œª ‚ñ° ‚Üí [ ‚ñ° ‚¶Ç S ]) (lookup-++ (ùì¢ .head) [ v ] i) lkup

new-frame? : (Stack √ó StackMap) ‚Üí Maybe StackMap ‚Üí (Stack √ó StackMap)
new-frame? (ùì¢ , _) (just œÉ) = ùì¢ , œÉ
new-frame? (ùì¢ , _) nothing = ([] ‚à∑‚Å∫ ùì¢) , const nothing

restore-frame? : Qual ‚Üí Stack ‚Üí Stack ‚Üí Stack
restore-frame? ùüô ùì¢‚ÇÅ ùì¢‚ÇÇ = ùì¢‚ÇÅ
restore-frame? ùüö ùì¢‚ÇÅ ùì¢‚ÇÇ = ùì¢‚ÇÇ


-- H,S ‚ä¢ c ‚áìq s c ‚ä£ S
data _,_,_‚ä¢_‚áì[_]_‚ä£_,_
  : Env ‚Üí Heap ‚Üí Stack √ó StackMap ‚Üí Expr ‚Üí Qual ‚Üí Val ‚Üí Heap ‚Üí Stack ‚Üí Set
  where

  EUnit  :
        ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ unit ‚áì[ q ] unit ‚ä£ ùìó , ùì¢

  EVarH :
        Access ùìî s v
       ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ var (X s ùüô) ‚áì[ ùüô ] v ‚ä£ ùìó , ùì¢

  EVarS :
        GenAccess ùìî ùì¢ œÉ x v
       ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ var x ‚áì[ ùüö ] v ‚ä£ ùìó , ùì¢

  EAbsH :
       ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ lam ùüô x e ùüô ‚áì[ ùüô ] clos ùüô ùìî nothing x e ùüô ‚ä£ ùìó , ùì¢

  EAbsS :
       ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ lam q x e q‚ÇÇ ‚áì[ ùüö ] clos q ùìî (resolve q œÉ) x e q‚ÇÇ ‚ä£ ùìó , ùì¢
  
  EAppH :
         ùìî , ùìó  , (ùì¢  , œÉ) ‚ä¢ e‚ÇÅ ‚áì[ ùüö  ] clos q ùìî‚Ä≤ œÉ? (X s q‚ÇÇ) e ùüô ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
       ‚Üí ùìî , ùìó‚Ä≤ , (ùì¢‚Ä≤ , œÉ) ‚ä¢ e‚ÇÇ ‚áì[ q‚ÇÇ ] v‚ÇÇ ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
       ‚Üí (ùìî‚Ä≤ ‚äï‚Çï (X s q‚ÇÇ , v‚ÇÇ)) , ùìó‚Ä≥ , new-frame? (ùì¢‚Ä≥ , œÉ) œÉ? ‚äï‚Çõ (X s q‚ÇÇ , v‚ÇÇ) ‚ä¢ e ‚áì[ ùüô ] v ‚ä£ ùìó‚Ä¥ , ùì¢‚Ä¥
       ‚Üí ùì¢‚Åó ‚â° restore-frame? q ùì¢‚Ä≥ ùì¢‚Ä¥
        ---------------------------------------------------------
       ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ app e‚ÇÅ e‚ÇÇ ‚áì[ ùüô ] v ‚ä£ ùìó‚Ä¥ , ùì¢‚Åó
       
  EAppS :
         ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e‚ÇÅ ‚áì[ ùüö ] clos q ùìî‚Ä≤ œÉ? (X s q‚ÇÅ) e q‚ÇÇ ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
       ‚Üí ùìî , ùìó‚Ä≤ , (ùì¢‚Ä≤ , œÉ) ‚ä¢ e‚ÇÇ ‚áì[ q‚ÇÅ ] v‚ÇÇ ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
       ‚Üí (ùìî‚Ä≤ ‚äï‚Çï (X s q‚ÇÅ , v‚ÇÇ)) , ùìó‚Ä≥ , new-frame? (ùì¢‚Ä≥ , œÉ) œÉ? ‚äï‚Çõ (X s q‚ÇÅ , v‚ÇÇ) ‚ä¢ e ‚áì[ q‚ÇÇ ] v ‚ä£ ùìó‚Ä¥ , ùì¢‚Ä¥
       ‚Üí ùì¢‚Åó ‚â° restore-frame? q ùì¢‚Ä≥ ùì¢‚Ä¥
        ---------------------------------------------------------
       ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ app e‚ÇÅ e‚ÇÇ ‚áì[ ùüö ] v ‚ä£ ùìó‚Ä¥ , ùì¢‚Åó

  ERefH :
        ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e ‚áì[ ùüô ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
        ---------------------------------------------------------
      ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ ref ùüô e ‚áì[ ùüô ] ref ùüô ‚à£ ùìó‚Ä≤ ‚à£ ∞ ‚ä£ ùìó‚Ä≤ ++ [ v ] , ùì¢‚Ä≤


  ERefS :
        ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e ‚áì[ q ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí (q ‚â° ùüô ‚Üí ùì¢‚Ä≥ ‚â° ùì¢‚Ä≤ √ó n ‚â° ‚à£ ùìó‚Ä≤ ‚à£ ∞ √ó ùìó‚Ä≥ ‚â° ùìó‚Ä≤ ++ [ v ])
      ‚Üí (q ‚â° ùüö ‚Üí ùìó‚Ä≥ ‚â° ùìó‚Ä≤ √ó (ùì¢‚Ä≥ , n) ‚â° alloc ùì¢‚Ä≤ v)
        --------------------------------------------------
      ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ ref q e ‚áì[ ùüö ] ref q n ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥

  EDerefH :
        ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e ‚áì[ ùüô ] ref ùüô ‚Ñì ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí read ùìó‚Ä≤ ‚Ñì v
        ----------------------------------------
      ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ deref ùüô e ‚áì[ ùüô ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤

  EDerefS :
        ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e ‚áì[ ùüö ] ref q ‚Ñì ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí (q ‚â° ùüô ‚Üí read ùìó‚Ä≤ ‚Ñì v)
      ‚Üí (q ‚â° ùüö ‚Üí sread ùì¢‚Ä≤ ‚Ñì v)
        -------------------------------------------------------
      ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ deref ùüö e ‚áì[ ùüö ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤

  ESetrefH :
        ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e‚ÇÅ ‚áì[ ùüô ] ref ùüô ‚Ñì ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí ùìî , ùìó‚Ä≤ , (ùì¢‚Ä≤ , œÉ) ‚ä¢ e‚ÇÇ ‚áì[ ùüô ] v ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
      ‚Üí write ùìó‚Ä≥ ‚Ñì v ùìó‚Ä¥
        ---------------------------------------------------------
      ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ setref e‚ÇÅ e‚ÇÇ ‚áì[ ùüô ] unit ‚ä£ ùìó‚Ä¥ , ùì¢‚Ä≥

  ESetrefS :
        ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e‚ÇÅ ‚áì[ ùüö ] ref q ‚Ñì ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí ùìî , ùìó‚Ä≤ , (ùì¢‚Ä≤ , œÉ) ‚ä¢ e‚ÇÇ ‚áì[ q ] v ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
      ‚Üí (q ‚â° ùüô ‚Üí write ùìó‚Ä≥ ‚Ñì v ùìó‚Ä¥ √ó ùì¢‚Ä¥ ‚â° ùì¢‚Ä≥)
      ‚Üí (q ‚â° ùüö ‚Üí ùìó‚Ä¥ ‚â° ùìó‚Ä≥ √ó swrite ùì¢‚Ä≥ ‚Ñì v ùì¢‚Ä¥)
        ---------------------------------------------------------
      ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ setref e‚ÇÅ e‚ÇÇ ‚áì[ ùüö ] unit ‚ä£ ùìó‚Ä¥ , ùì¢‚Ä¥

  ESeq :
        ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e‚ÇÅ ‚áì[ ùüö ] v‚ÇÅ ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
      ‚Üí ùìî , ùìó‚Ä≤ , (ùì¢‚Ä≤ , œÉ) ‚ä¢ e‚ÇÇ ‚áì[ q ] v‚ÇÇ ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
        ---------------------------------------------------------
      ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ seq e‚ÇÅ e‚ÇÇ ‚áì[ q ] v‚ÇÇ ‚ä£ ùìó‚Ä≥ , ùì¢‚Ä≥
