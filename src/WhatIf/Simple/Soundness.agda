module Simple.Soundness where

open import Data.String using (String; _‚âü_)
open import Data.List using (List; []; _‚à∑_; [_]; _++_; length; lookup; foldr)
open import Data.List.NonEmpty using (List‚Å∫; _‚à∑_; _‚à∑‚Å∫_; head; tail)
open import Data.List.Relation.Binary.Pointwise using (Pointwise; [] ; _‚à∑_; ++‚Å∫)
open import Data.Bool using (Bool; true; false)
open import Data.Fin using (Fin; zero; suc; from‚Ñï<; inject‚â§)
open import Data.Nat using (‚Ñï; zero; suc; _+_; _<_)
open import Data.Nat.Properties using () renaming (‚â§-trans to ‚â§‚Ñï-trans)
open import Data.Maybe using (Maybe; nothing; just)
open import Data.Product using (_√ó_; _,_ ; -,_; proj‚ÇÅ ; proj‚ÇÇ; ‚àÉ-syntax; Œ£)
open import Function using (case_of_)
open import Relation.Nullary.Decidable using (Dec; yes; no)
import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_; refl; sym; trans; cong)

open import Qualifiers
open import Simple.StackBasedBigStep



-- properties

postulate
  eval-preservation :
    Œì ‚ä¢ e ‚¶Ç S
    ‚Üí ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / (ùì¢ , œÉ)
    ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e ‚áì[ q ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
    ‚Üí ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / (ùì¢‚Ä≤ , œÉ)


variable
  HSs SSs : List QType
  

eval-soundness :
  Œ£‚Çï‚Çõ ‚ä¢‚Çï ùìó
  ‚Üí Œ£‚Çï‚Çõ ‚ä¢‚Çõ ùì¢
  ‚Üí Œì ‚ä¢ e ‚¶Ç S
  ‚Üí ‚ü® Œ£‚Çï‚Çõ , Œì ‚ü©‚ä® ùìî / (ùì¢ , œÉ)
  ‚Üí q-of S ‚â§ q
  ‚Üí ùìî , ùìó , (ùì¢ , œÉ) ‚ä¢ e ‚áì[ q ] v ‚ä£ ùìó‚Ä≤ , ùì¢‚Ä≤
  ‚Üí ‚àÉ[ Œ£‚Çï‚Çõ‚Ä≤ ] Œ£‚Çï‚Çõ ‚âº Œ£‚Çï‚Çõ‚Ä≤ √ó ‚ü® Œ£‚Çï‚Çõ‚Ä≤ ‚ü©‚ä¢[ v ‚¶Ç S ] √ó Œ£‚Çï‚Çõ‚Ä≤ ‚ä¢‚Çï ùìó‚Ä≤ √ó Œ£‚Çï‚Çõ‚Ä≤ ‚ä¢‚Çõ ùì¢‚Ä≤
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TSub ‚ä¢e S<‚¶Ç) ‚ä®ùìî ‚â§-q ‚áì
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî (‚â§-trans (q-of-mono S<‚¶Ç) ‚â§-q) ‚áì
... | _ , Œ£‚âº , ‚ä¢v , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  = -, Œ£‚âº , <‚¶Ç-val-lift ‚ä¢v S<‚¶Ç , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ TUnit ‚ä®ùìî ‚â§-q EUnit
  = -, ‚âº-refl , TVUnit , ‚ä¢ùìó , ‚ä¢ùì¢
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TVar x) ‚ä®ùìî ‚â§-refl (EVarH acc)
  = -, ‚âº-refl , access-soundness ‚ä®ùìî x acc , ‚ä¢ùìó , ‚ä¢ùì¢
eval-soundness {S = mkQ ùüô T} ‚ä¢ùìó ‚ä¢ùì¢ (TVar x) ‚ä®ùìî ‚â§-q (EVarS acc)
  = -, ‚âº-refl , genaccess-soundness ‚ä®ùìî x acc , ‚ä¢ùìó , ‚ä¢ùì¢
eval-soundness {S = mkQ ùüö T} ‚ä¢ùìó ‚ä¢ùì¢ (TVar x) ‚ä®ùìî ‚â§-q (EVarS acc)
  = -, ‚âº-refl , genaccess-soundness ‚ä®ùìî x acc , ‚ä¢ùìó , ‚ä¢ùì¢

----- abstraction

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TAbs {q = ùüô} ‚ä¢e qbdd {wf‚ÇÅ}{wf‚ÇÇ}) ‚ä®ùìî ‚â§-refl EAbsH
  = -, ‚âº-refl , TVClos (restrict‚Ä≤ ‚ä®ùìî qbdd) (is-bounded qbdd) ‚ä¢e wf‚ÇÅ wf‚ÇÇ <‚¶Ç-refl , ‚ä¢ùìó , ‚ä¢ùì¢
-- why is the following case legal?
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TAbs {q = ùüô} {S‚â§x = refl} ‚ä¢e qbdd {wf‚ÇÅ}{‚â§-refl}) ‚ä®ùìî ‚â§-bottop EAbsS
  = -, ‚âº-refl , TVClos (restrict‚Ä≤ ‚ä®ùìî qbdd) (is-bounded qbdd) ‚ä¢e wf‚ÇÅ ‚â§-refl <‚¶Ç-refl , ‚ä¢ùìó , ‚ä¢ùì¢
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TAbs {q = ùüö} ‚ä¢e qbdd {wf‚ÇÅ}{wf‚ÇÇ}) ‚ä®ùìî ‚â§-refl EAbsS
  = -, ‚âº-refl , TVClos (restrict‚Ä≤ ‚ä®ùìî qbdd) (is-bounded qbdd) ‚ä¢e wf‚ÇÅ wf‚ÇÇ <‚¶Ç-refl , ‚ä¢ùìó , ‚ä¢ùì¢

----- application

-- varying q and q‚ÇÇ (as in X s q‚ÇÇ)

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TApp ‚ä¢e ‚ä¢e‚ÇÅ) ‚ä®ùìî ‚â§-q (EAppH ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-refl ‚áì

-- q = ùüô, ùüô ‚Üí ùüô <‚¶Ç ùüô ‚Üí ùüô
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TApp ‚ä¢e ‚ä¢e‚ÇÅ) ‚ä®ùìî ‚â§-refl (EAppH {ùì¢‚Ä≥ = ùì¢‚Ä≥} ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVClos {q = ùüô} {x = X s q‚ÇÅ‚Ä≤} {S‚ÇÅ‚â§x = refl} ‚ä®ùìî‚Ä≤ qbd ‚ä¢e‚ÇÇ ‚â§-refl ‚â§-refl (SQual q1<=q2 (SFun {S‚ÇÉ = S‚ÇÉ@ (T‚ÇÉ ^ ùüô)}{S‚ÇÅ = S‚ÇÅ@ (T‚ÇÅ ^ ùüô)}{S‚ÇÇ = S‚ÇÇ}{S‚ÇÑ = S‚ÇÑ} <‚¶ÇSarg <‚¶ÇSres)) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with eval-soundness ‚ä¢ùìó‚Ä≤ ‚ä¢ùì¢‚Ä≤ ‚ä¢e‚ÇÅ (eval-preservation ‚ä¢e (‚ä®-extend-Œ£ ‚âºŒ£‚Ä≤ ‚ä®ùìî) ‚áì) (q-of-mono <‚¶ÇSarg) ‚áì‚ÇÅ
... | Œ£‚Çï‚Çõ‚Ä≥ , ‚âºŒ£‚Ä≥ , ‚ä¢varg , ‚ä¢ùìó‚Ä≥ , ‚ä¢ùì¢‚Ä≥
  using foo ‚Üê ‚ä®-extend-ùüô s T‚ÇÅ (‚ä¢·µ•-adjust (<‚¶Ç-val-lift ‚ä¢varg <‚¶ÇSarg)) (‚ä®-adjust {Œ£‚Çõ = []} (‚ä®-extend-Œ£ ‚âºŒ£‚Ä≥ ‚ä®ùìî‚Ä≤) {ùì¢‚Ä≥})
  with eval-soundness (‚ä¢‚Çï-adjust [] [] ‚ä¢ùìó‚Ä≥) [] ‚ä¢e‚ÇÇ foo (q-of-mono <‚¶ÇSres) ‚áì‚ÇÇ
... | Œ£‚Çï‚Çõ‚Ä¥ , ‚âºŒ£‚Ä¥ , ‚ä¢vres , ‚ä¢ùìó‚Ä¥ , ‚ä¢ùì¢‚Ä¥
  using ‚âºŒ£‚ÇÅ‚ÇÇ ‚Üê ‚âº-trans ‚âºŒ£‚Ä≤ ‚âºŒ£‚Ä≥
  = adjust-stack Œ£‚Çï‚Çõ‚Ä¥ (Œ£‚Çï‚Çõ‚Ä≥ ùüö)
  , ‚âº-trans ‚âºŒ£‚ÇÅ‚ÇÇ (‚âº-adjust-[] ‚âºŒ£‚Ä¥)
  , ‚ä¢·µ•-adjust (<‚¶Ç-val-lift ‚ä¢vres <‚¶ÇSres)
  , ‚ä¢‚Çï-adjust (Œ£‚Çï‚Çõ‚Ä≥ ùüö) {!!} ‚ä¢ùìó‚Ä¥
  , ‚ä¢‚Çõ-adjust {!‚âºŒ£‚Ä¥!} ‚ä¢ùì¢‚Ä≥
  -- = adjust-stack Œ£‚Çï‚Çõ‚Ä¥ (Œ£‚Çï‚Çõ‚Ä≥ ùüö)
  -- , ‚âº-trans ‚âºŒ£‚ÇÅ‚ÇÇ (‚âº-adjust ‚âºŒ£‚Ä¥)
  -- , (<‚¶Ç-val-lift (‚ä¢·µ•-adjust ‚ä¢vres) <‚¶ÇSres)
  -- , ‚ä¢‚Çï-adjust (Œ£‚Çï‚Çõ‚Ä≥ ùüö) (‚ä¢‚Çõ-adjust ‚âºŒ£‚Ä¥ ‚ä¢ùì¢‚Ä≥) ‚ä¢ùìó‚Ä¥
  -- , {!‚ä¢vres!} -- ‚ä¢‚Çõ-adjust ‚âºŒ£‚Ä¥ ‚ä¢ùì¢‚Ä≥

-- q = ùüô, ùüö ‚Üí ùüô <‚¶Ç ùüô ‚Üí ùüô
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TApp {S‚ÇÅ = S‚ÇÅ@ (T‚ÇÅ ^ ùüö)}{S‚ÇÇ = S‚ÇÇ} ‚ä¢e ‚ä¢e‚ÇÅ) ‚ä®ùìî ‚â§-refl (EAppH {ùì¢‚Ä≥ = ùì¢‚Ä≥} ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVClos {q = ùüô} {x = X s q‚ÇÅ‚Ä≤} {S‚ÇÅ‚â§x = refl} ‚ä®ùìî‚Ä≤ qbd ‚ä¢e‚ÇÇ ‚â§-refl ‚â§-refl (SQual ‚â§-bottop (SFun{S‚ÇÉ = S‚ÇÉ@ (T‚ÇÉ ^ ùüö)}{S‚ÇÅ = S‚ÇÅ‚Ä≤@ (T‚ÇÅ‚Ä≤ ^ ùüô)}{S‚ÇÑ = S‚ÇÑ} <‚¶ÇSarg <‚¶ÇSres)) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with eval-soundness ‚ä¢ùìó‚Ä≤ ‚ä¢ùì¢‚Ä≤ ‚ä¢e‚ÇÅ (eval-preservation ‚ä¢e (‚ä®-extend-Œ£ ‚âºŒ£‚Ä≤ ‚ä®ùìî) ‚áì) (q-of-mono <‚¶ÇSarg) ‚áì‚ÇÅ
... | Œ£‚Çï‚Çõ‚Ä≥ , ‚âºŒ£‚Ä≥ , ‚ä¢varg , ‚ä¢ùìó‚Ä≥ , ‚ä¢ùì¢‚Ä≥
  using foo ‚Üê ‚ä®-extend-ùüô s T‚ÇÅ‚Ä≤ (‚ä¢·µ•-adjust (<‚¶Ç-val-lift ‚ä¢varg <‚¶ÇSarg)) (‚ä®-adjust {Œ£‚Çõ = []} (‚ä®-extend-Œ£ ‚âºŒ£‚Ä≥ ‚ä®ùìî‚Ä≤) {ùì¢‚Ä≥})
  with eval-soundness (‚ä¢‚Çï-adjust [] [] ‚ä¢ùìó‚Ä≥) [] ‚ä¢e‚ÇÇ foo (q-of-mono <‚¶ÇSres) ‚áì‚ÇÇ
... | Œ£‚Çï‚Çõ‚Ä¥ , ‚âºŒ£‚Ä¥ , ‚ä¢vres , ‚ä¢ùìó‚Ä¥ , ‚ä¢ùì¢‚Ä¥
  = {!!} , {!!} , {!!} , {!!} , {!!}

-- q = ùüö, ...
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TApp ‚ä¢e ‚ä¢e‚ÇÅ) ‚ä®ùìî ‚â§-q (EAppH ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVClos {q = ùüö} {x = X s q‚ÇÇ} {S‚ÇÅ‚â§x = refl} ‚ä®ùìî‚Ä≤ qbd ‚ä¢e‚ÇÇ œÉ?‚â° wf‚ÇÇ (SQual q1<=q2 (SFun <‚¶ÇSarg <‚¶ÇSres)) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤ = {!!}

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TApp ‚ä¢e ‚ä¢e‚ÇÅ) ‚ä®ùìî ‚â§-q (EAppS ‚áì ‚áì‚ÇÅ ‚áì‚ÇÇ refl)
  = {!!}


----- sequence

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TSeq ‚ä¢e ‚ä¢e‚ÇÅ) ‚ä®ùìî ‚â§-q (ESeq ‚áì ‚áì‚ÇÅ)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-top ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVClos x x‚ÇÅ x‚ÇÇ x‚ÇÉ wf‚ÇÇ (SQual qsub ()) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVRef ‚Ñì< x (SQual qsub ()) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVUnit , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with eval-soundness ‚ä¢ùìó‚Ä≤ ‚ä¢ùì¢‚Ä≤ ‚ä¢e‚ÇÅ (eval-preservation ‚ä¢e (‚ä®-extend-Œ£ ‚âºŒ£‚Ä≤ ‚ä®ùìî) ‚áì) ‚â§-q ‚áì‚ÇÅ
... | Œ£‚Çï‚Çõ‚Ä≥ , ‚âºŒ£‚Ä≥ , ‚ä¢v , ‚ä¢ùìó‚Ä≥ , ‚ä¢ùì¢‚Ä≥
  = Œ£‚Çï‚Çõ‚Ä≥ , ‚âº-trans ‚âºŒ£‚Ä≤ ‚âºŒ£‚Ä≥ , ‚ä¢v , ‚ä¢ùìó‚Ä≥ , ‚ä¢ùì¢‚Ä≥

----- ref

-- Ref (T ^ ùüô) ^ ùüô / ERefH
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TRef {S = S@(T ^ ùüô)} {wf = ‚â§-refl} ‚ä¢e) ‚ä®ùìî ‚â§-refl (ERefH {ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚áì)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-refl ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , ‚ä¢v , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  rewrite sym (‚ä¢‚Çï-length ‚ä¢ùìó‚Ä≤)
  = extend-Œ£ Œ£‚Çï‚Çõ‚Ä≤ ùüô T , ‚âº-trans ‚âºŒ£‚Ä≤ (‚âº-extend-Œ£ ùüô T) , TVRef (length-< T (Œ£‚Çï‚Çõ‚Ä≤ ùüô) []) (lookup-last T (Œ£‚Çï‚Çõ‚Ä≤ ùüô)) <‚¶Ç-refl , ‚ä¢ùìó-extend-ùüô _ ‚ä¢v ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢-extend-ùüô {ùì¢ = ùì¢‚Ä≤} T ‚ä¢ùì¢‚Ä≤
-- Ref (T ^ ùüô) ^ ùüô / ERefS
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TRef {S = S@ (T ^ ùüô)} {q = ùüô} {wf = ‚â§-refl} ‚ä¢e) ‚ä®ùìî ‚â§-top (ERefS {q = q} {ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚áì q=1 q=2)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-refl ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , ‚ä¢v , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with refl , refl , refl ‚Üê q=1 refl
  rewrite sym (‚ä¢‚Çï-length ‚ä¢ùìó‚Ä≤)
 = extend-Œ£ Œ£‚Çï‚Çõ‚Ä≤ ùüô T , ‚âº-trans ‚âºŒ£‚Ä≤ (‚âº-extend-Œ£ ùüô T) , TVRef (length-< T (Œ£‚Çï‚Çõ‚Ä≤ ùüô) []) (lookup-last T (Œ£‚Çï‚Çõ‚Ä≤ ùüô)) <‚¶Ç-refl , ‚ä¢ùìó-extend-ùüô _ ‚ä¢v ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢-extend-ùüô {ùì¢ = ùì¢‚Ä≤} T ‚ä¢ùì¢‚Ä≤
-- Ref (T ^ ùüö) ^ ùüö / ERefS
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TRef {S = S@(T ^ ùüö)} {q = ùüö} {wf = ‚â§-refl} ‚ä¢e) ‚ä®ùìî ‚â§-top (ERefS {q = q} {ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚áì q=1 q=2)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-refl ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , ‚ä¢v , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with refl , refl ‚Üê q=2 refl
  rewrite sym (‚ä¢‚Çõ-length {ùì¢ = ùì¢‚Ä≤} ‚ä¢ùì¢‚Ä≤)
 = extend-Œ£ Œ£‚Çï‚Çõ‚Ä≤ ùüö S , ‚âº-trans ‚âºŒ£‚Ä≤ (‚âº-extend-Œ£ ùüö S) , TVRef (length-< S (Œ£‚Çï‚Çõ‚Ä≤ ùüö) []) (lookup-last S (Œ£‚Çï‚Çõ‚Ä≤ ùüö)) <‚¶Ç-refl , ‚ä¢ùìó-extend-ùüö S ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢-extend-ùüö {ùì¢ = ùì¢‚Ä≤} S ‚ä¢v ‚ä¢ùì¢‚Ä≤
-- Ref (T ^ ùüô) ^ ùüö / ERefS
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TRef {S = S@ (T ^ ùüô)} {q = ùüö} {wf = ‚â§-bottop} ‚ä¢e) ‚ä®ùìî ‚â§-refl (ERefS {ùì¢‚Ä≤ = ùì¢‚Ä≤} ‚áì q=1 q=2)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-bottop ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , ‚ä¢v , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with refl , refl ‚Üê q=2 refl
  rewrite sym (‚ä¢‚Çõ-length {ùì¢ = ùì¢‚Ä≤} ‚ä¢ùì¢‚Ä≤)
  = (extend-Œ£ Œ£‚Çï‚Çõ‚Ä≤ ùüö S) , (‚âº-trans ‚âºŒ£‚Ä≤ (‚âº-extend-Œ£ ùüö S)) , TVRef (length-< S (Œ£‚Çï‚Çõ‚Ä≤ ùüö) []) (lookup-last S (Œ£‚Çï‚Çõ‚Ä≤ ùüö)) <‚¶Ç-refl , (‚ä¢ùìó-extend-ùüö S ‚ä¢ùìó‚Ä≤) , (‚ä¢ùì¢-extend-ùüö {ùì¢ = ùì¢‚Ä≤} S ‚ä¢v ‚ä¢ùì¢‚Ä≤)


----- deref

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TDeref ‚ä¢e) ‚ä®ùìî ‚â§-refl (EDerefH ‚áì xread)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-refl ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVRef ‚Ñì< lkup‚â° (SQual ‚â§-refl (SRef S<‚¶Ç <‚¶ÇS)) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with refl ‚Üê <‚¶Ç-antisym S<‚¶Ç <‚¶ÇS
  = Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , typed-read ‚ä¢ùìó‚Ä≤ ‚Ñì< lkup‚â° xread , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TDeref {q = ùüö} ‚ä¢e) ‚ä®ùìî ‚â§-q (EDerefS ‚áì q=1 q=2)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-refl ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVRef ‚Ñì< lkup‚â° (SQual ‚â§-bottop (SRef S<‚¶Ç <‚¶ÇS)) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with xread ‚Üê q=1 refl
  with refl ‚Üê <‚¶Ç-antisym  S<‚¶Ç <‚¶ÇS
  = Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , typed-read ‚ä¢ùìó‚Ä≤ ‚Ñì< lkup‚â° xread , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVRef ‚Ñì< lkup‚â° (SQual ‚â§-refl (SRef S<‚¶Ç <‚¶ÇS)) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with xsread ‚Üê q=2 refl
  with refl ‚Üê <‚¶Ç-antisym  S<‚¶Ç <‚¶ÇS
  = Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , typed-sread ‚ä¢ùì¢‚Ä≤ ‚Ñì< lkup‚â° xsread , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤

----- setref

eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TSetref ‚ä¢e ‚ä¢e‚ÇÅ) ‚ä®ùìî ‚â§-q (ESetrefS {q = ùüô} ‚áì ‚áì‚ÇÅ q=1 q=2)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-top ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVRef ‚Ñì< lkup‚â° (SQual _ (SRef {wf‚ÇÅ = wf‚ÇÅ} <‚¶ÇS S<‚¶Ç)) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with refl ‚Üê <‚¶Ç-antisym  S<‚¶Ç <‚¶ÇS
  with eval-soundness ‚ä¢ùìó‚Ä≤ ‚ä¢ùì¢‚Ä≤ ‚ä¢e‚ÇÅ (eval-preservation ‚ä¢e (‚ä®-extend-Œ£ ‚âºŒ£‚Ä≤ ‚ä®ùìî) ‚áì) wf‚ÇÅ ‚áì‚ÇÅ
... | Œ£‚Çï‚Çõ‚Ä≥ , ‚âºŒ£‚Ä≥ , ‚ä¢v , ‚ä¢ùìó‚Ä≥ , ‚ä¢ùì¢‚Ä≥
  with xwrite , refl ‚Üê q=1 refl
  = Œ£‚Çï‚Çõ‚Ä≥ , (‚âº-trans ‚âºŒ£‚Ä≤ ‚âºŒ£‚Ä≥) , TVUnit , typed-write ‚ä¢ùìó‚Ä≥ (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength ‚âºŒ£‚Ä≥ ùüô)) (trans (trans (cong (lookup (Œ£‚Çï‚Çõ‚Ä≥ ùüô)) (from‚Ñï-inject‚â§ (‚âº‚áílength ‚âºŒ£‚Ä≥ ùüô) ‚Ñì<)) (sym (‚âº-lookup ‚âºŒ£‚Ä≥ ùüô (from‚Ñï< ‚Ñì<)))) lkup‚â°) ‚ä¢v xwrite , ‚ä¢ùì¢‚Ä≥
eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ (TSetref ‚ä¢e ‚ä¢e‚ÇÅ) ‚ä®ùìî ‚â§-q (ESetrefS {q = ùüö} ‚áì ‚áì‚ÇÅ q=1 q=2)
  with eval-soundness ‚ä¢ùìó ‚ä¢ùì¢ ‚ä¢e ‚ä®ùìî ‚â§-top ‚áì
... | Œ£‚Çï‚Çõ‚Ä≤ , ‚âºŒ£‚Ä≤ , TVRef ‚Ñì< lkup‚â° (SQual _ (SRef {wf‚ÇÅ = wf‚ÇÅ} <‚¶ÇS S<‚¶Ç)) , ‚ä¢ùìó‚Ä≤ , ‚ä¢ùì¢‚Ä≤
  with refl ‚Üê <‚¶Ç-antisym  S<‚¶Ç <‚¶ÇS
  with eval-soundness ‚ä¢ùìó‚Ä≤ ‚ä¢ùì¢‚Ä≤ ‚ä¢e‚ÇÅ (eval-preservation ‚ä¢e (‚ä®-extend-Œ£ ‚âºŒ£‚Ä≤ ‚ä®ùìî) ‚áì) wf‚ÇÅ ‚áì‚ÇÅ
... | Œ£‚Çï‚Çõ‚Ä≥ , ‚âºŒ£‚Ä≥ , ‚ä¢v , ‚ä¢ùìó‚Ä≥ , ‚ä¢ùì¢‚Ä≥
  with refl , xswrite ‚Üê q=2 refl
  = Œ£‚Çï‚Çõ‚Ä≥ , (‚âº-trans ‚âºŒ£‚Ä≤ ‚âºŒ£‚Ä≥) , TVUnit , ‚ä¢ùìó‚Ä≥ , typed-swrite ‚ä¢ùì¢‚Ä≥ (‚â§‚Ñï-trans ‚Ñì< (‚âº‚áílength ‚âºŒ£‚Ä≥ ùüö)) (trans (trans (cong (lookup (Œ£‚Çï‚Çõ‚Ä≥ ùüö)) (from‚Ñï-inject‚â§ (‚âº‚áílength ‚âºŒ£‚Ä≥ ùüö) ‚Ñì<)) (sym (‚âº-lookup ‚âºŒ£‚Ä≥ ùüö (from‚Ñï< ‚Ñì<)))) lkup‚â°) ‚ä¢v xswrite
